<?xml version="1.0" encoding="UTF-8"?>
<modular xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="./modular.xsd">
	<combos>
		<combo id="acts" name="Acts" desc="All elements for describing acts and existing legislative documents" content="core legislativeDocs act modifications tblock semantic advancedRefs authorialNote specials delimiters table"/>
		<combo id="bills" name="Bills" desc="All elements for describing bills and legislative documents being drafted and discussed" content="core legislativeDocs bill tblock semantic advancedRefs authorialNote specials delimiters table"/>
		<combo id="amendments" name="Amendments" desc="All elements for describing amendments and amendment lists" content="core legislativeDocs collectionDocs amendmentDocs amendmentList advancedPreface specials authorialNote"/>
		<combo id="debates" name="Debates and hansards" desc="All elements for describing hansards and debates" content="core debateDocs debate advancedPreface authorialNote toc delimiters"/>
		<combo id="judgments" name="judgments" desc="All elements for describing judgments and sentences" content="core judgmentDocs advancedPreface tblock authorialNote"/>
		<combo id="minutes" name="Minutes" desc="All elements for describing minutes in a Parliament setting" content="debateDocs debateReport core tblock toc advancedPreface semantic advancedRefs"/>
		<combo id="orderOfTheDay" name="Order of the Day" desc="All elements for describing orders of the day in a Parliament setting" content="core tblock toc authorialNote"/>	
		<combo id="reports" name="Reports" desc="All elements for describing reports in a Parliament setting" content="core tblock toc advancedPreface semantic authorialNote table"/>	
		<combo id="OfficialGazette" name="Official Gazette" desc="All elements for describing Official Gazettes" content="core legislativeDocs act modifications tblock semantic advancedRefs authorialNote specials delimiters table collectionDocs officialGazette"/>	
	</combos>
&lt;!-- =====================================================================
     Akoma Ntoso main schema                                              
     supported by Africa i-Parliaments, a project sponsored by United
     Nations Department of Economic and Social Affairs
     Copyright (C) Africa i-Parliaments


     <report version="Release 20/12/2013 - Akoma Ntoso 3.0 CSD07"/>

     technical supervision Fabio Vitali - University of Bologna
     legal domain supervision Monica Palmirani - University of Bologna
        
     The present schema uses systematically XML design patterns as
     described in http://www.xmlpatterns.com/
     A few of them are explicitly mentioned, when their use or approach
     was not felt clear or natural enough. Others are just used without
     mentions.

     TERMS AND CONDITIONS
		 
		 This schema is provided by OASIS, the Copyright Holder, under the licence 
		 specified in the file licence.txt that can also be found at the URL xxxx
		 
     ===================================================================== -->

&lt;!TARGETNS       'http://docs.oasis-open.org/legaldocml/ns/akn/3.0/CSD06'>
&lt;!TARGETNS  xml  'http://www.w3.org/XML/1998/namespace'>

&lt;!-- =====================================================================

        Main element groups

     ===================================================================== -->
<include if="legislativeDocs">
&lt;!--- The group ANhier lists the elements that belong to the Akoma Ntoso legislative hierarchy -->
&lt;!ENTITY @@ ANhier          "(clause|section|part|paragraph|chapter|title<include if="optHierarchy" v="|article|book|tome|division|list"/> <include if="smallHierarchy" v="|point|indent|alinea|rule|subrule|proviso"/><include if="additionalHierarchy" v="|subsection|subpart|subparagraph|subchapter|subtitle|subdivision|subclause|sublist"/><include if="transitionalSection" v="|transitional"/>)" >
</include>
<include if="debateDocs">	
&lt;!--- The group ANcontainers lists the elements that are containers and are specific to the Akoma Ntoso debate vocabulary -->
&lt;!ENTITY @@ ANcontainers    "(speechGroup | speech | question | answer | other | scene | narrative | summary)" >
</include>
<include if="prefaceSubstructures">	
&lt;!--- The group basicContainers lists the elements that are containers and are specific to vocabulary of preambles, prefaces, conclusions and coverPages -->
&lt;!ENTITY @@ basicContainers    "(longTitle | formula <include if="generic" v="|container"/>)" >
&lt;!--- The group preambleContainers lists the elements that are containers and are specific to the Akoma Ntoso preamble vocabulary -->
&lt;!ENTITY @@ preambleContainers    "(recitals | citations | formula <include if="generic" v="|container"/>)" >
&lt;!--- The group prefaceContainers lists the elements that are containers and are specific to the Akoma Ntoso preface vocabulary -->
&lt;!ENTITY @@ prefaceContainers    "(longTitle | formula <include if="generic" v="| container"/> )" >
</include>
&lt;!--- The group ANblock lists the elements that are blocks and are specific to the Akoma Ntoso vocabulary -->
&lt;!ENTITY @@ ANblock         "(blockList | blockContainer <include if="tblock" v="| tblock"/><include if="toc" v="| toc"/>)" >
&lt;!--- The group ANinline lists the elements that are inline and are specific to the Akoma Ntoso vocabulary -->
&lt;!ENTITY @@ ANinline        "(ref <include if="advancedRefs" v="| mref | rref"/> <include if="modifications" v="| mod | mmod | rmod"/><include if="debateDocs" v="| remark | recordedTime | vote | outcome"/> <include if="publishing" v=" | ins | del | omissis"/> <include if="extracts" v="| extractText | extractStructure"/> <include if="specials" v="| placeholder | fillIn | decoration"/>)" >
&lt;!--- The group ANtitleInline lists the elements that are inline, are specific to the Akoma Ntoso vocabulary, and should only be used within the title element -->
&lt;!ENTITY @@ ANtitleInline   "(docType | docTitle | docNumber | docProponent | docDate <include if="legislativePreface" v="| legislature | session | shortTitle"/><include if="advancedPreface" v="|docAuthority|docPurpose|docCommittee|docIntroducer|docStage|docStatus|docJurisdiction|docketNumber"/>)" >

<include if="judgmentDocs">
&lt;!--- The group ANheaderInline lists the elements that are inline, are specific to the Akoma Ntoso vocabulary, and should only be used within the header element -->
&lt;!ENTITY @@ ANheaderInline  "(courtType | neutralCitation | party | judge | lawyer | signature | opinion | argument)" >
</include>

<include if="semantic">
&lt;!--- The group ANsemanticInline lists additional elements that are inline, and are specific to the Akoma Ntoso vocabulary -->
&lt;!ENTITY @@ ANsemanticInline   "(date| time | person| organization| concept| object| event| location| process| role| term| quantity| def <include if="generic" v="| entity"/>)" >
</include>
&lt;!--- The group ANmarker lists the elements that are markers and are specific to the Akoma Ntoso vocabulary -->
&lt;!ENTITY @@ ANmarker        "(noteRef <include if="delimiters" v="|  eol | eop"/>)" >

<include if="authorialNote">
&lt;!--- The group ANsubFlow lists the elements that are subFlows and are specific to the Akoma Ntoso vocabulary -->
&lt;!ENTITY @@ ANsubFlow          "(authorialNote )" >
</include>
	
&lt;!--- The group HTMLcontainers lists the elements that are containers and were inherited from the HTML vocabulary -->
&lt;!ENTITY @@ HTMLcontainers    "( div )" >
&lt;!--- The group HTMLblock lists the elements that are blocks and were inherited from the HTML vocabulary -->
&lt;!ENTITY @@ HTMLblock         "(<include if="html" v="ul|ol|"/><include if="table" v="table|"/> p)" >
&lt;!--- The group HTMLinline lists the elements that are inline and were inherited from the HTML vocabulary -->
&lt;!ENTITY @@ HTMLinline        "(<include if="html" v="b | i | a | u | sub | sup  | abbr |"/> span)" >
	
<include if="html">
&lt;!--- The group HTMLmarker lists the elements that are marker and were inherited from the HTML vocabulary -->
&lt;!ENTITY @@ HTMLmarker        "(img | br)" >
</include>

<include if="judgmentDocs">	
&lt;!--- The group judgmentBlock lists the structures that should be found in a judgment -->
&lt;!ENTITY @@ judgmentBlock    "(introduction | background | arguments | remedies | motivation | decision)">
</include>
<include if="amendmentDocs">	
&lt;!--- The group amendmentBlock lists the structures that should be found in an amendment  -->
&lt;!ENTITY @@ amendmentBlock    "(amendmentHeading | amendmentContent | amendmentReference | amendmentJustification)">
&lt;!--- The group amendmentInline lists the inline elements that should be found in the preface of an amendment  -->
&lt;!ENTITY @@ amendmentInline    "(affectedDocument | relatedDocument | change)">
</include>
<include if="debateDocs">	
&lt;!--- The group speechSection lists the structures that should contain speeches -->
&lt;!ENTITY @@ speechSection     "(administrationOfOath|rollCall|prayers|oralStatements|writtenStatements|personalStatements|
                                   ministerialStatements|resolutions|nationalInterest|declarationOfVote|communication|
                                   petitions|papers|noticesOfMotion|questions|address|proceduralMotions|pointOfOrder| 
                                   adjournment|debateSection)">                                   
</include>

<include if="legislativeDocs">
&lt;!--- The group hierElements lists all the elements that are hierarchical -->
&lt;!ENTITY @@ hierElements      "(@@ANhier; <include if="generic" v="|hcontainer"/>)">
</include>
&lt;!--- The group containerElements lists all the elements that are containers -->
&lt;!ENTITY @@ containerElements "(<include if="debateDocs" v="@@speechSection; |"/> @@HTMLcontainers; <include if="generic" v="|container"/>)">
&lt;!--- The group blockElements lists all the elements that are blocks -->
&lt;!ENTITY @@ blockElements     "(@@ANblock;      | @@HTMLblock;      <include if="additionalGeneric" v="| foreign"/> <include if="generic" v="|block"/>)">
&lt;!--- The group inlineElements lists all the elements that are inline -->
&lt;!ENTITY @@ inlineElements    "(@@ANinline;     | @@HTMLinline;   | @@ANtitleInline;  <include if="semantic" v="| @@ANsemanticInline;"/> <include if="judgmentDocs" v="|@@ANheaderInline;"/> <include if="amendmentDocs" v="|@@amendmentInline;"/> <include if="generic" v="|inline"/>     )">
<include if="authorialNote">
&lt;!--- The group subFlowElements lists all the elements that are subFlows -->
&lt;!ENTITY @@ subFlowElements    "(@@ANsubFlow;  <include if="generic" v="|subFlow"/>)">
</include>
&lt;!--- The group markerElements lists all the elements that are markers -->
&lt;!ENTITY @@ markerElements    "(@@ANmarker;   <include if="html" v="|@@HTMLmarker; "/>  <include if="generic" v="|marker"/>  )">

&lt;!--- The group inlineCM is the content model of blocks and inlines, and is composed of all the inlines and all the markers -->
&lt;!ENTITY @@ inlineCM          "(@@inlineElements; | @@markerElements; <include if="authorialNote" v="| @@subFlowElements;"/>)">

&lt;!-- =====================================================================

        Attribute groups

     ===================================================================== -->
     
&lt;!--- The attribute alternativeTo is used to specify, when the element contains an alternative version of some content, the currentId of the main element which this element is an alternative copy of -->
&lt;!ENTITY ## alt         "alternativeTo         #ANYURI        #IMPLIED" >
&lt;!--- The attribute name is used to give a name to all generic elements -->
&lt;!ENTITY ## name         "name         #STRING        #REQUIRED" >
&lt;!--- The attribute number is used to specify a number in the publication of the document -->
&lt;!ENTITY ## number       "number       #STRING        #IMPLIED" >
&lt;!--- The attribute source links to the agent (person, organization) providing the specific annotation or markup -->
&lt;!ENTITY ## source       "source       #ANYURI        #REQUIRED" >
&lt;!--- The attribute date is used to give a normalized value for a date according to the XSD syntax YYYY-MM-DD or a normalized value for a dateTime according to the XSD syntax YYYY-MM-DDThh:mm:ss(zzzz)  -->
&lt;!ENTITY ## date         "date         #DATE | #DATETIME         #REQUIRED" >
&lt;!--- The attribute time is used to give a normalized value for a time according to the XSD syntax HH:MM:SS -->
&lt;!ENTITY ## time         "time         #TIME          #REQUIRED" >
&lt;!--- The attribute href is used to specify an internal or external destination for a reference, a citation, an access to the ontology or a hypertext link. In elements using this attribute definition the href attribute is required -->
&lt;!ENTITY ## link         "href         #ANYURI        #REQUIRED" >
&lt;!--- The attribute href is used to specify an internal or external destination for a reference, a citation, an access to the ontology or a hypertext link. In elements using this attribute definition the href attribute is optional -->
&lt;!ENTITY ## linkopt      "href         #ANYURI        #IMPLIED" >
&lt;!--- The attribute value is used to specify a value for metadata elements. In elements using this attribute definition the value attribute is required -->
&lt;!ENTITY ## value        "value        #STRING        #REQUIRED" >
&lt;!--- The attribute value is used to specify a value for metadata elements. In elements using this attribute definition the value attribute is optional -->
&lt;!ENTITY ## optvalue     "value        #STRING        #IMPLIED" >
&lt;!--- The attribute value is used here to specify a boolean value for metadata elements. In elements using this attribute definition the value attribute is required -->
&lt;!ENTITY ## booleanvalue     "value        #BOOLEAN        #REQUIRED" >
<include if="debateDocs">
&lt;!--- The attributes in speechAtts are used in speeches to identify actors and roles of speeches. In particular, attribute 'by' identifies the speaker, optional attribute 'as' identifies the role under which the speaker is speaking, optional attribute startTime specifies the absolute date and time where the individual speech item started, optional attribute endTime specifies the absolute date and time where the individual speech item ended, and  optional attribute to identifies the addressee of the speech. All of them are references to person or organization elements in the references section -->
&lt;!ENTITY ## speechAtts "by           #ANYURI        #REQUIRED 
                           as           #ANYURI        #IMPLIED
                           startTime    #DATETIME      #IMPLIED
                           endTime      #DATETIME      #IMPLIED
                           to           #ANYURI        #IMPLIED ">
&lt;!--- The attributes in voteAtts are used in votes to identify actors and choices in votes. In particular, attribute 'by' identifies the voter, optional attribute 'as' identifies the role under which the voter is acting, optional attribute 'choice' specifies the voe that was casted. -->
&lt;!ENTITY ## voteAtts   "by           #ANYURI        #REQUIRED 
                           as           #ANYURI        #IMPLIED
                           choice       #ANYURI        #IMPLIED ">
</include>
&lt;!--- These attributes are used in metadata to propose visible representations of the metadata itself. Both a full visualization (attribute showAs) and an abbreviated one (attribute shortForm) can be specified -->
&lt;!ENTITY ## show         "showAs       #STRING        #REQUIRED  
                          shortForm    #STRING        #IMPLIED">
&lt;!ENTITY ## showopt    "showAs       #STRING        #IMPLIED  
                          shortForm    #STRING        #IMPLIED">
&lt;!--- These attributes are used in manifestation-level references to specify external manifestation-level resources to be loaded in place. The src attribute holds the manifestation-level IRI of the resource, whule the alt attribute holds the text to be displayed in case the loading of the external resource is not possible for any reason. -->
&lt;!ENTITY ## src         "src       #ANYURI        #REQUIRED  
                            alt       #STRING        #IMPLIED">
&lt;!--- The period attribute is used in versioned content and metadata elements to indicate a time interval in which they were in force, in efficacy, or in any other type of interval as specified in the corresponding temporalGroup.  -->
&lt;!ENTITY ## period "
    period           #ANYURI        #IMPLIED"
>
&lt;!--- These attributes are those already defined in attribute list "period", plus the attribute status, that allows to specify the status of the piece of text it wraps.  -->
&lt;!ENTITY ## enactment "
    ##period;
    status     #statusType;  #IMPLIED
">
&lt;!--- These attributes are used by notes, both authorial and editorial -->
&lt;!ENTITY ## notes "
		                      marker    #STRING         #IMPLIED
                          placement #placementType; #IMPLIED	
                          placementBase #ANYURI     #IMPLIED	
">

&lt;!--- These attributes are used in the analysis to allow manifestation editors to specify whether the analysis is complete and/or ignored in the text -->
&lt;!ENTITY ## modifiers "
    exclusion  #BOOLEAN #IMPLIED
    incomplete #BOOLEAN #IMPLIED
">
&lt;!--- The attribute role is used to identify the role of an individual mentioned in the text. It is a reference to a TLCRole element in the references section -->
&lt;!ENTITY ## role "
    as #ANYURI #IMPLIED
">
&lt;!--- The attribute actor is used to identify the actor of a step of a workflow of the document. It is a reference to a TLCPerson or TLCOrganization element in the references section -->
&lt;!ENTITY ## actor "
    actor #ANYURI #IMPLIED
">
&lt;!--- The attribute outcome is used to identify the outcome of a step in a workflow. It is a reference to a TLCConcept element in the references section -->
&lt;!ENTITY ## outcome "outcome #ANYURI #IMPLIED">

&lt;!--- The attributes startQuote and endQuote are used in quotedText, quotedStructure, extractText and extractStructure to specify the start and quote character delimiting the quoted or extracted part. If the characters are the same, one can use only startQuote. -->
&lt;!ENTITY ## quote "
	startQuote #STRING #IMPLIED 
	endQuote #STRING #IMPLIED
">
	
<include if="table">
&lt;!--- These attributes are used to specify that table cells span more than one row or one column, exactly as in HTML -->
&lt;!ENTITY ## cellattrs    "rowspan      #INTEGER     '1'
                          colspan      #INTEGER     '1'  ">
</include>
	
&lt;!--- These attributes are used to specify class, style and title of the element, exactly as in HTML -->
&lt;!ENTITY ## HTMLattrs    "class        #STRING      #IMPLIED    
                          style        #STRING      #IMPLIED
                          title        #STRING      #IMPLIED">
&lt;!--- This attribute list are used to specify the fact that any attribute can be specified for this element if it belongs to a different namespace. -->
&lt;!ENTITY ## core    "xxxdirtyTrick        #STRING      #IMPLIED">
&lt;!--- These attributes identify the element in an absolute manner. In elements using this attribute definition the currentId attribute is required. The originalId is used to mark the identifier that the structure used to have in the original version, and is only needed when a renumbering occurred. -->
&lt;!ENTITY ## idreq        "currentId    #NMTOKEN           #REQUIRED
                             originalId   #NMTOKEN           #IMPLIED 
                             GUID         #NMTOKEN           #IMPLIED">
&lt;!--- These attributes identify the element in an absolute manner. In elements using this attribute definition the currentId attribute is optional. The originalId is used to mark the identifier that the structure used to have in the original version, and is only needed when a renumbering occurred. -->
&lt;!ENTITY ## idopt        "currentId    #NMTOKEN           #IMPLIED
                             originalId   #NMTOKEN           #IMPLIED 
                             GUID         #NMTOKEN           #IMPLIED">

&lt;!--- This attribute creates a connection between the element and an element of the Akoma Ntoso ontology to which it refers. In elements using this attribute definition the refersTo attribute is required -->
&lt;!ENTITY ## refersreq    "refersTo           (#ANYURI+)         #REQUIRED" >
&lt;!--- This attribute creates a connection between the element and an element of the Akoma Ntoso ontology to which it refers. In elements using this attribute definition the refersTo attribute is optional -->
&lt;!ENTITY ## refers       "refersTo           (#ANYURI+)         #IMPLIED" >
&lt;!--- These attribute specify the human language in which the content of the element is expressed as well as the rules for whitespace management in the element. Values for xml:lang are taken from the RFC 4646. Both xml:lang and xml:space are reserved attributes of the XML language, and cannot be used for any other purpose than these ones.  -->
&lt;!ENTITY ## xmllang       "
                   xml:lang           #language;         #IMPLIED
                   xml:space          (default|preserve) #IMPLIED
                   " >

&lt;!--- This is the list of the core attributes that all elements in the content part of the document must have. In elements using this attribute definition the refersTo attribute is optional but the currentId attribute is required -->
&lt;!ENTITY ## corereq      "##core; ##HTMLattrs; ##enactment; ##idreq; ##refers; ##xmllang; ##alt;" >
&lt;!--- This is the list of the core attributes that all elements in the content part of the document must have. In elements using this attribute definition both the refersTo attribute and the currentId attribute are required -->
&lt;!ENTITY ## corereqreq   "##core; ##HTMLattrs; ##enactment; ##idreq; ##refersreq; ##xmllang; ##alt;" >
&lt;!--- This is the list of the core attributes that all elements in the content part of the document must have. In elements using this attribute definition both the refersTo attribute and the currentId attribute are optional -->
&lt;!ENTITY ## coreopt      "##core; ##HTMLattrs; ##enactment; ##idopt; ##refers; ##xmllang; ##alt;" >

&lt;!-- =====================================================================

        Simple types (data values)

     ===================================================================== -->
&lt;!--- This attribute specifies the human language in which the document the element refers to is expressed. Values are taken from the RFC 4646.  -->
&lt;!ENTITY # language           "#STRING" >
&lt;!--- This is the list of allowed values for the contains attribute   -->
&lt;!ENTITY # versionType    "#STRING(originalVersion|singleVersion|multipleVersions)" >
&lt;!--- This is the list of allowed values for the placement attribute of notes  -->
&lt;!ENTITY # placementType    "#STRING(side|left|right|bottom|inline)" >

<include if="advancedMetadata">
&lt;!--- This is the list of allowed values for the type attribute of the event and action elements  -->
&lt;!ENTITY # eventType      "#STRING(generation|amendment|repeal)" >
</include>
&lt;!--- This is the list of allowed values for the status attribute. This is the list of possible reasons for a dscrepancy between the manifestation as it should be (e.g., a faithful representation of the content of an expression), and the manifestation as it actually is. Values should be interpreted as follows: 
- removed: the content of the element is present in the markup (manifestation) but is not present in the real content of the document (expression level) because it has been definitely removed (either ex tunc, as in annullments, or ex nunc, as in abrogations). 
- temporarily removed: the content of the element is present in the markup (manifestation) but is not present in the real content of the document (expression level) because it has been temporarily removed (e.g., for a temporary suspension or limitation of efficacy). 
- translated: the content of the element is present in the markup (manifestation) in a different form than in the real content of the document (expression level) because it has been translated into a different language (e.g., to match the rest of the document or because of other editorial decisions). 
- editorial: the content of the element is present in the markup (manifestation) but is not present in the real content of the document (expression level) because it has been inserted as an editorial process when creating the XML markup.
- edited: the content of the element is different in the markup (manifestation) than in the real content of the document (expression level) because it has been amended (e.g., to remove scurrilous or offensive remarks). 
- verbatim: the content of the element is present in the markup (manifestation) is EXACTLY as it was in the real content of the document (expression level) because usual silent fixes and edits were NOT performed (e.g. to punctuation, grammatical errors or other usually non-debatable problems). 
- incomplete: the content of the element or the value of a required attribute is NOT present in the markup (manifestation), although it should, because the missing data is not known at the moment, but in the future it might become known. This is especially appropriate for documents in drafting phase (e.g., the publication date of the act while drafting the bill)
- unknown: the content of the element or the value of a required attribute is NOT present in the markup (manifestation), although it should, because the author of the manifestation does not know it.
- undefined: the content of the element or the value of a required attribute is NOT present in the markup (manifestation), because the information is not defined in the original document, or it doesn't exist in some legal tradition (e.g. an anonymous speech cannot specify the attribute by, or some publications do not record the numbering of the items, etc.)
- ignored: the content of the element or the value of a required attribute is NOT present in the markup (manifestation) because the information exists but the author of the manifestation is not interested in reporting it (e.g., omitted parts of the document due to editorial reasons, etc.) -->
&lt;!ENTITY # statusType     "#STRING(removed | temporarilyRemoved | translated | editorial | edited | verbatim | incomplete | unknown | undefined | ignored)">

<include if="debateDocs">
&lt;!--- This is the list of allowed values for the type attribute of the remark element  -->
&lt;!ENTITY # remarkType     "#STRING(sceneDescription|phenomenon|caption|translation)">
&lt;!--- This is the list of allowed values for the type attribute of the recordedTime element  -->
&lt;!ENTITY # timeType       "#STRING(startEvent|endEvent)">
</include>

<include if="judgmentDocs">
&lt;!--- This is the list of allowed values for the type attribute of the opinion element  -->
&lt;!ENTITY # opinionType  "#STRING(dissenting|agreeing|null)">
&lt;!--- This is the list of allowed values for the type attribute of the result element  -->
&lt;!ENTITY # resultType  "#STRING(deny|dismiss|uphold|revert|replaceOrder|remit|decide|approve)">
</include>
<include if="analysis">
&lt;!--- This is the list of possible positions of the text being analyzed by the element in the analysis section -->
&lt;!ENTITY # posType  "#STRING(start|before|inside|after|end|unspecified)">
	<include if="restrictions">
&lt;!--- This is the list of allowed values for the restriction type attribute   -->
&lt;!ENTITY # restrictionType    "#STRING(jurisdiction)" >
	</include>
</include>
	
&lt;!-- =====================================================================

        Complex types (markup structures)

     ===================================================================== -->

&lt;!--- The complex type basehierarchy is not used by any element, but is derived by other types to contain the basic structure of hierarchical elements   -->
&lt;!ENTITY @ basehierarchy     "(num?, heading?, subheading?)" >
<include if="legislativeDocs">
&lt;!--- The complex type hierarchy is used by most or all the hierarchical elements of act-like documents. -->
&lt;!ENTITY @ hierarchy         "@basehierarchy;, ((intro?, (<include if="components" v="componentRef | "/> @@hierElements;)*, wrap?) | content)"            "##corereq;">
</include>
&lt;!--- The complex type althierarchy is used by most or all the hierarchical elements of documents that are not act-like. -->
&lt;!ENTITY @ althierarchy      "@basehierarchy;, (@@containerElements;  | <include if="components" v="componentRef | "/> <include if="debateDocs" v="@@ANcontainers; |"/> @@blockElements;)*" "##corereq;">
&lt;!--- the complex type blocksreq defines the content model and attributes shared by all containers. Here the currentId attribute is required -->
&lt;!ENTITY @ blocksreq         "(@@blockElements;)*" "##corereq;">
&lt;!--- the complex type blocksopt defines the content model and attributes shared by all containers. Here the currentId attribute is optional -->
&lt;!ENTITY @ blocksopt         "(@@blockElements;)*" "##coreopt;">
&lt;!--- the complex type inline defines the content model and attributes shared by all blocks and inlines. Here the currentId attribute is optional -->
&lt;!ENTITY @ inline            "(#PCDATA | @@inlineCM;)*" "##coreopt;">
&lt;!--- the complex type inlinereq defines the content model and attributes shared by all blocks and inlines. Here the currentId attribute is required -->
&lt;!ENTITY @ inlinereq         "(#PCDATA | @@inlineCM;)*" "##corereq;">
&lt;!--- the complex type inlinereq defines the content model and attributes shared by all blocks and inlines. Here the currentId attribute is required and also the refersTo is required -->
&lt;!ENTITY @ inlinereqreq      "(#PCDATA | @@inlineCM;)*" "##corereqreq;">

&lt;!--- the complex type markerreq defines the content model and attributes shared by all marker elements. Here the currentId attribute is required -->
&lt;!ENTITY @ markerreq         "" "##corereq;">
&lt;!--- the complex type markeropt defines the content model and attributes shared by all marker elements. Here the currentId attribute is optional -->
&lt;!ENTITY @ markeropt         "" "##coreopt;">
&lt;!--- the complex type metareq defines the content model and attributes shared by all metadata elements. Here the currentId attribute is required -->
&lt;!ENTITY @ metareq           "" "##core; ##idreq;">
&lt;!--- the complex type metaopt defines the content model and attributes shared by all metadata elements. Here the currentId attribute is optional -->
&lt;!ENTITY @ metaopt           "" "##core; ##idopt;">

&lt;!--- the complex type maincontent is used by container elements that can contain basically any other Akoma Ntoso structure -->
&lt;!ENTITY @ maincontent       "(<include if="components" v="componentRef | "/> <include if="legislativeDocs" v="@@hierElements; |"/> @@blockElements; | @@containerElements; )+" "##coreopt;" >

<include if="debateDocs">	
&lt;!--- the complex type speechType defines the content model and attributes shared by all speech elements. Here the currentId attribute is optional -->
&lt;!ENTITY @ speechType        "@basehierarchy;, (from?, (@@blockElements;)+)" "##coreopt; ##speechAtts;" >
</include>

&lt;!--- The complex type itemType is similar to a hierarchical element, but is isolated and does not belong to a full hierarchy. -->
&lt;!ENTITY @ itemType          "@basehierarchy;, (@@blockElements;)+"             "##corereq;">
&lt;!--- the complex type referenceType defines the empty content model and the list of attributes for metadata elements in the references section -->
&lt;!ENTITY @ referenceType     ""                            "##core; ##idreq; ##link; ##show;" >
&lt;!--- the complex type srcType defines the empty content model and the list of attributes for manifestation-level references to external resources -->
&lt;!ENTITY @ srcType     ""                            "##core; ##idopt; ##src; ##show;" >
&lt;!--- the complex type linkType defines the empty content model and the list of attributes for Work- or Expression-level references to external resources -->
&lt;!ENTITY @ linkType     ""                            "##core; ##idreq; ##link; ##show;" >
&lt;!--- the complex type anyOtherType defines an open content model for elements that may use elements from other namespaces. -->
&lt;!ENTITY @ anyOtherType      "ANY{##other}"                "##core; ##idopt; ##linkopt;" >                 

&lt;!-- =====================================================================

        Root element
        Comment: One generic root element contains all document elements
        Pattern: Universal Root 
        Reference: http://www.xmlpatterns.com/UniversalRootMain.shtml

     ===================================================================== -->

&lt;!--- the type documentType lists all the document types that are managed by Akoma Ntoso -->
	&lt;!ENTITY @@ documentType      "(	
						<include if="collectionDocs">
							<include if="amendmentList" v="amendmentList | "/>
							<include if="officialGazette" v="officialGazette | "/>							
							documentCollection |
						</include> 
						<include if="legislativeDocs">
							<include if="act" v="act | "/>
							<include if="bill" v="bill | "/>							
						</include>
						<include if="debateDocs">
							<include if="debateReport" v="debateReport | "/>
							<include if="debate" v="debate | "/>														
						</include> 
						<include if="statementDocs" v="statement |" />
						<include if="amendmentDocs" v="amendment |" />
						<include if="judgmentDocs" v="judgment |" />
						<include if="components" v="fragment |" /> doc)">

  

&lt;!-- =====================================================================

        Document elements
        Comment: All document elements share just two content models
        Pattern: Consistent Element Set
        Reference: http://www.xmlpatterns.com/ConsistentElementSetMain.shtml

     ===================================================================== -->

&lt;!--- the complex type akomaNtosoType is the type for the root element in Akoma Ntoso. -->
&lt;!ENTITY @ akomaNtosoType    '((@@documentType;) <include if="components" v=", components?"/>)' >
&lt;!--- the element akomaNtoso is the root element of all document types in Akoma Ntoso. It follows the pattern Universal Root (http://www.xmlpatterns.com/UniversalRootMain.shtml) -->
&lt;!ROOT     akomaNtoso        @akomaNtosoType; >

<include if="core" label="Core elements" desc="Document element $doc"/>	
&lt;!--- the type openStructure specifies the overall content model of all the document types that do not have a specific and peculiar structure -->
&lt;!ENTITY @ openStructure     "(meta, 
                                 coverPage?,
                                 preface?,
                                 preamble?, 
                                 mainBody, 
                                 conclusions?, 
                                 attachments?
                                 <include if="components" v=", components?"/>)" 
                                 "##name; contains #versionType; 'originalVersion'">

&lt;!--- Element doc is used for describing the structure and content of any other document that is not included in the list of document explicitly managed by Akoma Ntoso -->
&lt;!ELEMENT doc           @openStructure; >
&lt;!ATTLIST doc           xxxUnicityConstraintDirtyTrick        #STRING      #IMPLIED>

&lt;!--- the element mainBody is the container of the main part of all other document types -->
&lt;!ELEMENT mainBody     @maincontent; >
<include if="statementDocs" label="Statement" desc="Document type $statement">
&lt;!--- Element statement is used for describing the structure and content of a official documents of a legislative assembly that are not normative in structure (e.g., statements, non-normative resolutions, etc.). -->
&lt;!ELEMENT statement  @openStructure; >
&lt;!ATTLIST statement  xxxUnicityConstraintDirtyTrick        #STRING      #IMPLIED>
</include>

	
<include if="collectionDocs" label="Collections of smaller documents" desc="Document types $amendmentList, $officialGazette and $documentCollection">		
&lt;!--- the type collectionStructure specifies the overall content model of the document types that are collections of other documents -->
&lt;!ENTITY @ collectionStructure "(meta, 
                                   coverPage?,
                                   preface?,
                                   preamble?, 
                                   collectionBody, 
                                   conclusions?, 
                                   attachments?
                                   <include if="components" v=", components?"/>)" 
                                 "##name; contains #versionType; 'originalVersion'">

<include if="amendmentList" dependsOn="collectionDocs" label="Amendment list" desc="A document containing lists of amendments" >
&lt;!--- Element amendmentList is used for describing the structure and content of a collection of amendments -->
&lt;!ELEMENT amendmentList           @collectionStructure; >
</include>
<include if="officialGazette" dependsOn="collectionDocs" label="Official Gazette" desc="A document containing sequences of acts and other legislative documents" >
&lt;!--- Element officialGazette is used for describing the structure and content of an issue of an official gazette -->
&lt;!ELEMENT officialGazette           @collectionStructure; >
</include>
&lt;!--- Element documentCollection is used for describing the structure and content of a collection of other documents chosen and combined for any reason whatsoever -->
&lt;!ELEMENT documentCollection           @collectionStructure; >

&lt;!--- the type collectionBodyType specifies a content model of a container of a list of other documents (e.g, acts, bills, amendments, etc.) possibly  interspersed with interstitial elements with content that does not form an individual document -->
&lt;!ENTITY @ collectionBodyType  "(@@documentType; | documentRef | interstitial?)+" "##coreopt;" >
&lt;!--- the element collectionBody is the container of a list of other documents (e.g, acts, bills, amendments, etc.) possibly  interspersed with interstitial elements with content that does not form an individual document -->
&lt;!ELEMENT collectionBody       @collectionBodyType; >
</include>
	
<include if="components" label="Component: an independent fragment of another document" desc="Document element $fragment">		
&lt;!--- the type fragmentStructure specifies the overall content model of the document type that is a fragment of another document -->
&lt;!ENTITY @ fragmentStructure   "(meta, 
                                   fragmentBody)" 
                                  "includedIn #ANYURI #REQUIRED">

&lt;!--- Element fragment is used for describing the structure and content of an independent fragment of a document -->
&lt;!ELEMENT fragment           @fragmentStructure; >
&lt;!ATTLIST fragment           xxxUnicityConstraintDirtyTrick        #STRING      #IMPLIED>

&lt;!--- the type fragmentBodyType specifies a content model of a container of a fragment of another document -->
&lt;!ENTITY @ fragmentBodyType  "(@@containerElements; <include if="legislativeDocs" v="| @@hierElements; "/> <include if="debateDocs" v="| @@ANcontainers;"/> <include if="prefaceSubstructures" v="| recital | citation"/>)" "##coreopt;" >
&lt;!--- the element fragmentBody is the container of a fragment of another document -->
&lt;!ELEMENT fragmentBody       @fragmentBodyType; >
</include>

<include if="legislativeDocs" label="Legislative documents">
&lt;!--- the type hierarchicalStructure specifies the overall content model of the document types that are hierarchical in nature, especially acts and bills -->
&lt;!ENTITY @ hierarchicalStructure "(meta, 
                                     coverPage?,
                                     preface?,
                                     preamble?, 
                                     body, 
                                     conclusions?, 
                                     attachments?
                                     <include if="components" v=", components?"/>)" 
                                   "##name; contains #versionType; 'originalVersion'">
<include if="act" dependsOn="legislativeDocs" label="Acts" desc="legislative document $act">
&lt;!--- Element act is used for describing the structure and content of an act -->
&lt;!ELEMENT act           @hierarchicalStructure; >
&lt;!ATTLIST act					 xxxUnicityConstraintDirtyTrick        #STRING      #IMPLIED>
</include>
<include if="bill" dependsOn="legislativeDocs" label="Bills" desc="legislative document $bill">
&lt;!--- Element bill is used for describing the structure and content of a bill -->
&lt;!ELEMENT bill          @hierarchicalStructure; >
&lt;!ATTLIST bill					 xxxUnicityConstraintDirtyTrick        #STRING      #IMPLIED>
</include>	
	
&lt;!--- the type bodyType specifies a content model of the main hierarchy of a hierarchical document (e.g, an act or a bill) -->
&lt;!ENTITY @ bodyType  "(<include if="components" v="componentRef | "/> @@hierElements;)+" "##coreopt;" >	
&lt;!--- the element body is the container of the main hierarchy of a hierarchical document (e.g, an act or a bill) -->
&lt;!ELEMENT body            @bodyType; >

</include>
<include if="debateDocs" label="Parliamentary debates and hansards" desc="Document elements $debateReport and $debate">
&lt;!--- the type debateStructure specifies the overall content model of the document types that describe debates -->
&lt;!ENTITY @ debateStructure     "(meta, 
                                   coverPage?,
                                   preface?,
                                   debateBody, 
                                   conclusions?, 
                                   attachments?
                                   <include if="components" v=", components?"/>)" 
                                 "##name; contains #versionType; 'originalVersion'">

<include if="debateReport" dependsOn="debateDocs" label="Debate reports" desc="Document type $debateReport">
&lt;!--- Element debateReport is used for describing the structure and content of a report -->
&lt;!ELEMENT debateReport        @openStructure; >
&lt;!ATTLIST debateReport        xxxUnicityConstraintDirtyTrick        #STRING      #IMPLIED>
</include>
<include if="debate" dependsOn="debateDocs" label="Debates" desc="Document type $debate">
&lt;!--- Element debate is used for describing the structure and content of a debate record -->
&lt;!ELEMENT debate  @debateStructure; >
&lt;!ATTLIST debate  xxxUnicityConstraintDirtyTrick        #STRING      #IMPLIED>
</include>

&lt;!--- the type debateBodyType specifies a content model of the main hierarchy of a debate -->
&lt;!ENTITY @ debateBodyType  "(@@speechSection;)+" "##coreopt;" >	
&lt;!--- the element debateBody is the container of the main hierarchy of a debate -->
&lt;!ELEMENT debateBody        @debateBodyType;   >
</include>

<include if="judgmentDocs" label="judgments" desc="Document type $judgment">
&lt;!--- the type judgmentStructure specifies the overall content model of the document types that describe judgments -->
&lt;!ENTITY @ judgmentStructure  "(meta, 
                                   coverPage?,
                                   header,
                                   judgmentBody, 
                                   conclusions?, 
                                   attachments?
                                   <include if="components" v=", components?"/>)" 
                                 "##name; contains #versionType; 'originalVersion'">

&lt;!--- Element judgment is used for describing the structure and content of a judgment -->
&lt;!ELEMENT judgment     @judgmentStructure; >
&lt;!ATTLIST judgment     xxxUnicityConstraintDirtyTrick        #STRING      #IMPLIED>

&lt;!--- the type judgmentBodyType specifies a content model of the main hierarchy of a judgment document -->
&lt;!ENTITY @ judgmentBodyType  "(@@judgmentBlock;)+" "##coreopt;" >	
&lt;!--- the element judgmentBody is the container of the main hierarchy of a judgment document -->
&lt;!ELEMENT judgmentBody   @judgmentBodyType; >
</include>
	
<include if="amendmentDocs" label="Amendments" desc="Document type $amendment">
&lt;!--- the type amendmentStructure specifies the overall content model of the document types that describe amendments -->
&lt;!ENTITY @ amendmentStructure  "(meta, 
                                   coverPage?,
                                   preface?,
                                   amendmentBody, 
                                   conclusions?, 
                                   attachments?
                                   <include if="components" v=", components?"/>)" 
                                 "##name; contains #versionType; 'originalVersion'">

&lt;!--- Element amendment is used for describing the structure and content of an amendment -->
&lt;!ELEMENT amendment     @amendmentStructure; >
&lt;!ATTLIST amendment     xxxUnicityConstraintDirtyTrick        #STRING      #IMPLIED>

&lt;!--- the type amendmentBodyType specifies a content model of the main hierarchy of a amendment document -->
&lt;!ENTITY @ amendmentBodyType  "(@@amendmentBlock;)+" "##coreopt;" >	
&lt;!--- the element amendmentBody is the container of the main hierarchy of a amendment document -->
&lt;!ELEMENT amendmentBody   @amendmentBodyType; >
</include>
	
<include if="prefaceSubstructures" dependsOn="core" label="Substructures in prefaces and preambles" desc="Substructures such as $recitals, $recital, $citations, $citation and $longTitle">	
	
&lt;!ENTITY @ recitalHierarchy         "@basehierarchy;, (intro?, (<include if="components" v="componentRef | "/> recital)+, wrap?)"            "##corereq;">

&lt;!--- the element recitals is the section of the preface that contains recitals -->
&lt;!ELEMENT recitals    @recitalHierarchy; >
&lt;!--- the element recital is the individual element of the preface that is called recital -->
&lt;!ELEMENT recital    @itemType; >

&lt;!ENTITY @ citationHierarchy         "@basehierarchy;, (intro?, (<include if="components" v="componentRef | "/> citation)+, wrap?)"            "##corereq;">

&lt;!--- the element citations is the section of the preface that contains citations -->
&lt;!ELEMENT citations    @citationHierarchy; >

&lt;!--- the element citation is the individual element of the preface that is called citation -->
&lt;!ELEMENT citation    @itemType; >
&lt;!--- the element longTitle is the section of the preface or preamble that is called long title -->
&lt;!ELEMENT longTitle    @blocksreq; >
&lt;!--- the element formula is a section of the preface or preamble that contains a formulaic expression that is systematically or frequently present in a preface or a preamble and has e precise legal meaning (e.g. an enacting formula). Use the refersTo attribute for the specification of the actual type of formula. -->
&lt;!ELEMENT formula    @blocksreq; >
&lt;!ATTLIST formula    ##name; >

</include>


<include if="core"  desc="Shared structural elements $coverPage, $preamble, $preface, $conclusions, $attachments, "/>		
&lt;!--- the complex type basicopt defines the content model and attributes used by basic containers such as coverPage and conclusions. Here the currentId attribute is optional -->
&lt;!ENTITY @ basicopt         "(@@blockElements; <include if="prefaceSubstructures" v="| @@basicContainers;" /> )+" "##coreopt;">
&lt;!--- the element coverPage is used as a container of the text that acts as a cover page -->
&lt;!ELEMENT coverPage    @basicopt; >
&lt;!--- the complex type preambleopt defines the content model and attributes used by preambles. Here the currentId attribute is optional -->
&lt;!ENTITY @ preambleopt         "(@@blockElements; <include if="prefaceSubstructures" v="| @@preambleContainers;" /> )+" "##coreopt;">
&lt;!--- the element preamble is used as a container of the text that opens the main body of the document as a preamble -->
&lt;!ELEMENT preamble    @preambleopt; >
&lt;!--- the complex type prefaceopt defines the content model and attributes used by preface. Here the currentId attribute is optional -->
&lt;!ENTITY @ prefaceopt         "(@@blockElements; <include if="prefaceSubstructures" v="| @@prefaceContainers;" /> )+" "##coreopt;">
&lt;!--- the element preface is used as a container of all prefacing material (e.g. headers, formulas, etc.) -->
&lt;!ELEMENT preface     @prefaceopt; >
&lt;!--- the element conclusion is used as a container of all concluding material (e.g. dates, signatures, formulas, etc.) -->
&lt;!ELEMENT conclusions @basicopt; >
&lt;!--- the element header is used as a container of all prefacing material of judgments (e.g. headers, formulas, etc.) -->
&lt;!ELEMENT header      @blocksopt; >
&lt;!--- the element attachments is used as a container of individual attachment elements -->
&lt;!ELEMENT attachments (attachment)+ >
&lt;!--- the element attachment is used as a container of individual attachment elements -->
&lt;!ELEMENT attachment (@@documentType; | interstitial <include if="toc" v="| toc"/> <include if="components" v="| documentRef"/>)+ >
&lt;!ATTLIST attachment ##corereq; >
&lt;!--- the element interstitial is used as a container of text elements and blocks that are placed for any reason between individual documents in a collection of documents -->
&lt;!ELEMENT interstitial  @blocksreq; >
<include if="components" desc="references to components at the Work and Expression levels ($documentRef) and at the Manifestation level ($componentRef).">
&lt;!--- the element componentRef is a reference to a separate manifestation-level resource that holds the content of the component of the document not physically placed at the position specified. Actual resources can either be external (e.g. in the package or even in a different position) or internal (within the components element) -->
&lt;!ELEMENT componentRef  @srcType; >
&lt;!--- the element documentRef is a reference to a separate work- or expression-level resource that should be placed in this position. Actual resources are external (e.g. in the package or even in a different position) and are (an expression or any expression of) a separate Work. -->
&lt;!ELEMENT documentRef  @linkType; >
</include>

<include if="legislativeDocs" desc="typical hierarchical elements of legislative documents $clause, $section, $part, $paragraph, $chapter, and $title">
&lt;!-- =====================================================================

        Elements for hierarchical documents

===================================================================== -->
	
&lt;!--- this element is a hierarchical container called "clause" either explicitly or due to the local tradition -->
&lt;!ELEMENT clause        @hierarchy; >
&lt;!--- this element is a hierarchical container called "section" either explicitly or due to the local tradition -->
&lt;!ELEMENT section       @hierarchy; >        
&lt;!--- this element is a hierarchical container called "part" either explicitly or due to the local tradition -->
&lt;!ELEMENT part          @hierarchy; >
&lt;!--- this element is a hierarchical container called "paragraph" either explicitly or due to the local tradition -->
&lt;!ELEMENT paragraph     @hierarchy; >
&lt;!--- this element is a hierarchical container called "chapter" either explicitly or due to the local tradition -->
&lt;!ELEMENT chapter       @hierarchy; >
&lt;!--- this element is a hierarchical container called "title" either explicitly or due to the local tradition -->
&lt;!ELEMENT title         @hierarchy; >
<include if="optHierarchy" dependsOn="legislativeDocs"  label="Optional hierarchy" desc="optional hierarchical elements $article, $book, $tome, $division and $list">
&lt;!--- this element is a hierarchical container called "book" either explicitly or due to the local tradition -->
&lt;!ELEMENT book          @hierarchy; >
&lt;!--- this element is a hierarchical container called "tome" either explicitly or due to the local tradition -->
&lt;!ELEMENT tome          @hierarchy; >
&lt;!--- this element is a hierarchical container called "article" either explicitly or due to the local tradition -->
&lt;!ELEMENT article       @hierarchy; >
&lt;!--- this element is a hierarchical container called "division" either explicitly or due to the local tradition -->
&lt;!ELEMENT division      @hierarchy; >
&lt;!--- this element is a hierarchical container called "list" either explicitly or due to the local tradition -->
&lt;!ELEMENT list          @hierarchy; >
</include>
<include if="smallHierarchy" dependsOn="legislativeDocs" label="Small hierarchical elements" desc="hierarchical elements of smaller fragments of a hierarchy, such as $point, $indent, $alinea, $rule, $subrule, $proviso.">
&lt;!--- this element is a hierarchical container called "point" either explicitly or due to the local tradition -->
&lt;!ELEMENT point    @hierarchy; >
&lt;!--- this element is a hierarchical container called "indent" either explicitly or due to the local tradition -->
&lt;!ELEMENT indent    @hierarchy; >
&lt;!--- this element is a hierarchical container called "alinea" either explicitly or due to the local tradition -->
&lt;!ELEMENT alinea    @hierarchy; >
&lt;!--- this element is a hierarchical container called "rule" either explicitly or due to the local tradition -->
&lt;!ELEMENT rule      @hierarchy; >
&lt;!--- this element is a hierarchical container called "subrule" either explicitly or due to the local tradition -->
&lt;!ELEMENT subrule   @hierarchy; >
&lt;!--- this element is a hierarchical container called "proviso" either explicitly or due to the local tradition -->
&lt;!ELEMENT proviso   @hierarchy; >
</include>
<include if="additionalHierarchy" dependsOn="legislativeDocs" label="Additional hierarchy" desc="infrequent hierarchical elements $subsection, $subpart, $subparagraph, $subchapter, $subtitle, $subdivision, $subclause and $sublist">
&lt;!--- this element is a hierarchical container called "subsection" either explicitly or due to the local tradition -->
&lt;!ELEMENT subsection    @hierarchy; >
&lt;!--- this element is a hierarchical container called "subpart" either explicitly or due to the local tradition -->
&lt;!ELEMENT subpart       @hierarchy; >
&lt;!--- this element is a hierarchical container called "subparagraph" either explicitly or due to the local tradition -->
&lt;!ELEMENT subparagraph  @hierarchy; >
&lt;!--- this element is a hierarchical container called "subchapter" either explicitly or due to the local tradition -->
&lt;!ELEMENT subchapter    @hierarchy; >
&lt;!--- this element is a hierarchical container called "subtitle" either explicitly or due to the local tradition -->
&lt;!ELEMENT subtitle      @hierarchy; >
&lt;!--- this element is a hierarchical container called "subdivision" either explicitly or due to the local tradition -->
&lt;!ELEMENT subdivision      @hierarchy; >
&lt;!--- this element is a hierarchical container called "subclause" either explicitly or due to the local tradition -->
&lt;!ELEMENT subclause     @hierarchy; >
&lt;!--- this element is a hierarchical container called "sublist" either explicitly or due to the local tradition -->
&lt;!ELEMENT sublist       @hierarchy; >
</include>
<include if="transitionalSection" dependsOn="legislativeDocs" label="Transitional section" desc="$transitional, a hierarchical element containing transitory clauses, often at the end of the whole hierarchy">
&lt;!--- this element is a hierarchical container called "transitional" either explicitly or due to the local tradition -->
&lt;!ELEMENT transitional    @hierarchy; >
</include>	
&lt;!--- the element content is the final container in a hierarchy, and is where the blocks of text of the content of the structure are finally specified  -->
&lt;!ELEMENT content       @blocksreq; >
</include>

<include desc="heading for structured and hierarchical elements $num, $heading, $subheading"/>

&lt;!--- the element num is a heading element in a hierarchy that contains a number or any other ordered mechanism to identify the structure. -->
&lt;!ELEMENT num           @inline; >
&lt;!--- the element heading is a heading element in a hierarchy that contains a title or any other textual content to describe the structure. -->
&lt;!ELEMENT heading       @inlinereq; >
&lt;!--- the element subheading is a heading element in a hierarchy that contains a subtitle or any other textual content to further describe the structure. -->
&lt;!ELEMENT subheading    @inline; >
&lt;!--- the element intro is a heading element in a hierarchy that contains paragraphs introducing one or more lower hierarchical elements. -->
&lt;!ELEMENT intro    @blocksreq; >
&lt;!--- the element wrap is a concluding element in a hierarchy that contains paragraphs wrapping up the preceding lower hierarchical elements. -->
&lt;!ELEMENT wrap    @blocksreq; >

	
<include if="debateDocs" desc="Named structural elements $administrationOfOath, $declarationOfVote, $communication, $petitions, $papers, $noticesOfMotion, $question, $address, $proceduralMotion, $pointOfOrder">

&lt;!-- =====================================================================

        Elements for debates documents

     ===================================================================== -->

&lt;!--- this element is a structural container for parts of a debates that contain the administration of an oath -->
&lt;!ELEMENT administrationOfOath  @althierarchy; >

&lt;!--- this element is a structural container for parts of a debates that contain a roll call of individuals -->
&lt;!ELEMENT rollCall  @althierarchy; >
&lt;!--- this element is a structural container for parts of a debates that contain prayers -->
&lt;!ELEMENT prayers  @althierarchy; >
&lt;!--- this element is a structural container for parts of a debates that contain oral statements by participants -->
&lt;!ELEMENT oralStatements  @althierarchy; >
&lt;!--- this element is a structural container for parts of a debates that contain written statements by participants -->
&lt;!ELEMENT writtenStatements  @althierarchy; >
&lt;!--- this element is a structural container for parts of a debates that contain written statements by participants -->
&lt;!ELEMENT personalStatements  @althierarchy; >
&lt;!--- this element is a structural container for parts of a debates that contain written statements by participants -->
&lt;!ELEMENT ministerialStatements  @althierarchy; >
&lt;!--- this element is a structural container for parts of a debates that contain resolutions -->
&lt;!ELEMENT resolutions  @althierarchy; >
&lt;!--- this element is a structural container for parts of a debates that contain resolutions -->
&lt;!ELEMENT nationalInterest  @althierarchy; >

&lt;!--- this element is a structural container for parts of a debates that are relevant to the declaration of votes -->
&lt;!ELEMENT declarationOfVote     @althierarchy; >
&lt;!--- this element is a structural container for parts of a debates that contain communications from the house -->
&lt;!ELEMENT communication         @althierarchy; >
&lt;!--- this element is a structural container for parts of a debates that are relevant to petitions -->
&lt;!ELEMENT petitions             @althierarchy; >
&lt;!--- this element is a structural container for parts of a debates that are relevant to the display of papers -->
&lt;!ELEMENT papers                @althierarchy; >
&lt;!--- this element is a structural container for parts of a debates that are relevant to the notices of motions -->
&lt;!ELEMENT noticesOfMotion       @althierarchy; >
&lt;!--- this element is a structural container for parts of a debates that are relevant to questions -->
&lt;!ELEMENT questions             @althierarchy; >
&lt;!--- this element is a structural container for parts of a debates that are relevant to addresses -->
&lt;!ELEMENT address               @althierarchy; >
&lt;!--- this element is a structural container for parts of a debates that are relevant to procedural motions -->
&lt;!ELEMENT proceduralMotions     @althierarchy; >
&lt;!--- this element is a structural container for parts of a debates that are relevant to points of order -->
&lt;!ELEMENT pointOfOrder          @althierarchy; >
&lt;!--- this element is a structural container for parts of a debates that contain adjournment notices -->
&lt;!ELEMENT adjournment  @althierarchy; >
</include>
<include if="debateDocs" desc="Generic structural container $debateSection">
&lt;!--- this element is a generic structural container for all other parts of a debates that are not explicitly supported with a named element -->
&lt;!ELEMENT debateSection           @althierarchy; >
&lt;!ATTLIST debateSection           ##name; >
</include>
<include if="debateDocs" desc="Content elements $speechGroup, $speech, $question, $answer, $other, $scene">

&lt;!--- the element speechGroup is a container of speech elements. This element is meant to pooint out, in a complex sequence of individual speech elements, the main contributor, i.e., the individual speech who was introducedand expected and that is causing the complex sequence that follows. Attributes by, as and to are those of the main speech. -->
&lt;!ELEMENT speechGroup         @althierarchy; >
&lt;!ATTLIST speechGroup         ##speechAtts; >
&lt;!--- the element speech is a container of a single speech utterance in a debate. Dialogs between speakers need a speech element each -->
&lt;!ELEMENT speech              @speechType; >
&lt;!--- the element question is a container of a single official question as proposed by an MP to a person holding an official position -->
&lt;!ELEMENT question            @speechType; >
&lt;!--- the element answer is a container of a single official answer to a question -->
&lt;!ELEMENT answer              @speechType; >
&lt;!--- the element other is a container of parts of a debate that are not speeches, nor scene comments (e.g., lists of papers, etc.) -->
&lt;!ELEMENT other               @blocksreq; >
&lt;!--- the element scene is a container of descriptions of the scene elements happening in a given moment during a debate (e.g., applauses) -->
&lt;!ELEMENT scene               @inline; >
&lt;!--- the element narrative is a block element in a debate to mark description in the third person of events taking place in the meeting, e.g. "Mr X. takes the Chair" -->
&lt;!ELEMENT narrative               @inline; >
&lt;!--- the element summary is a block element in a debate to mark summaries of speeches that are individually not interesting (e.g.: "Question put and agreed to") -->
&lt;!ELEMENT summary               @inline; >
&lt;!--- the element from is a heading element in a debate that contains the name or role or a reference to the person doing the speech -->
&lt;!ELEMENT from          @inline; >

&lt;!--- the element vote is an inline that wraps either the name of the voter (when organized by choice) or the vote (when organized by name) in a voting report. -->
&lt;!ELEMENT vote               @inline; >
&lt;!ATTLIST vote 							##voteAtts; >
&lt;!--- the element outcome is an inline that wraps the outcome of a vote -->
&lt;!ELEMENT outcome               @inline; >


</include>
<include if="judgmentDocs" desc="Structural elements $introduction, $background, $arguments, $remedies, $motivation and $decision">

&lt;!--- this element is a structural container for the section of a judgment containing introductory material -->
&lt;!ELEMENT introduction        @maincontent; >
&lt;!--- this element is a structural container for the section of a judgment containing the background  -->
&lt;!ELEMENT background          @maincontent; >
&lt;!--- this element is a structural container for the section of a judgment containing the arguments  -->
&lt;!ELEMENT arguments          @maincontent; >
&lt;!--- this element is a structural container for the section of a judgment containing the remedies  -->
&lt;!ELEMENT remedies          @maincontent; >
&lt;!--- this element is a structural container for the section of a judgment containing the motivation  -->
&lt;!ELEMENT motivation          @maincontent; >
&lt;!--- this element is a structural container for the section of a judgment containing the decision -->
&lt;!ELEMENT decision            @maincontent; >
</include>
<include if="amendmentDocs" desc="Structural elements $amendmentHeading, $amendmentContent, $amendmentReference and $amendmentJustification">

&lt;!--- the element affectedDocument is an inline element within preamble to identify the document that this amendment affects -->
&lt;!ELEMENT affectedDocument        @inline; >
&lt;!ATTLIST affectedDocument        ##link; >
&lt;!--- the element relatedDocument is an inline element to identify the document for which this document is a report of -->
&lt;!ELEMENT relatedDocument        @inline; >
&lt;!ATTLIST relatedDocument        ##link; >
&lt;!--- the element change is an inline element that identifies the changes expressed in the two columns of an amendment document -->
&lt;!ELEMENT change                  @inline; >

&lt;!--- this element is a structural container for the section of an amendment containing the heading -->
&lt;!ELEMENT amendmentHeading        @blocksopt; >
&lt;!--- this element is a structural container for the section of an amendment containing the actual amendment text  -->
&lt;!ELEMENT amendmentContent          @blocksopt; >
&lt;!--- this element is a structural container for the section of an amendment containing the reference  -->
&lt;!ELEMENT amendmentReference          @blocksopt; >
&lt;!--- this element is a structural container for the section of an amendment containing the justification -->
&lt;!ELEMENT amendmentJustification            @blocksopt; >
</include>
	
&lt;!-- =====================================================================
    
    AN block elements
    Comment: the only AN-specific block are the table of content (TOC), 
    a structure containing toc items related to the various subparts of the 
    main document, the list item and the titled block
    
    ===================================================================== -->
<include desc="Block-context peculiar elements: $blockContainer, $blockList, $listIntroduction, $item, and $listConclusion"/>
&lt;!--- the element blockContainer is used as a container of many individual block elements in a block context -->
&lt;!ENTITY @ blockContainerType      "@basehierarchy;, (intro?, (<include if="components" v="componentRef | "/> @@blockElements;)+, wrap?)"            "##corereq;" >
&lt;!ELEMENT blockContainer           @blockContainerType; >

&lt;!--- the element blocklist is used as a container of many individual item elements put in a list -->
&lt;!ELEMENT blockList                (listIntroduction?, item+, listConclusion?) >
&lt;!ATTLIST blockList                ##corereq; >
&lt;!-- The element item is a container belonging to a list -->
&lt;!ELEMENT item                @itemType; >
&lt;!--- the element listIntroduction is an optional element of list before any item of the list itself.  -->
&lt;!ELEMENT listIntroduction   @inline; >
&lt;!--- the element listConclusion is an optional element of list after all items of the list itself.  -->
&lt;!ELEMENT listConclusion   @inline; >

<include if="tblock" dependsOn="core" label="Titled block" desc="The element tblock (titled block) is used to specify a container for blocks introduced by heading elements, similarly to a hierarchical structure.">
&lt;!--- The element tblock (titled block) is used to specify a container for blocks introduced by heading elements, similarly to a hierarchical structure -->
&lt;!ELEMENT tblock              @itemType; >
</include>
<include if="toc" dependsOn="core" label="Table of content" desc="the element $toc (Table of Content) is used as a container of many individual  items of the toc (element $tocItem)">
	
&lt;!--- the element toc (Table of Content) is used as a container of many individual toc items -->
&lt;!ELEMENT toc       (tocItem)+ >
&lt;!ATTLIST toc       ##corereq; >

&lt;!--- the element tocItem is a component of the table of content and contains header information about sections or parts of the rest of the document -->
&lt;!ELEMENT tocItem   @inline; >
&lt;!ATTLIST tocItem   ##link; level #INTEGER #REQUIRED >
</include>
	
   
  <include desc="Basic Inline elements for prefaces $docType, $docTitle, $docNumber, $docProponent, and $docDate."/> 
&lt;!-- =====================================================================

        AN inline elements
        Comment: AN-specific inline elements are connected to the 
        identification of elements that are corresponding to an inline 
        legal structure, regardless of their position in the document.

     ===================================================================== -->

&lt;!--- the element docType is an inline element within preface to identify the string used by the document for its own type -->
&lt;!ELEMENT docType      @inline; >
&lt;!--- the element docTitle is an inline element within preface to identify the string used by the document for its own title -->
&lt;!ELEMENT docTitle     @inline; >
&lt;!--- the element docNumber is an inline element within preface to identify the string used by the document for its own number -->
&lt;!ELEMENT docNumber    @inline; >
&lt;!--- the element docProponent is an inline element within preface to identify the string used by the document for its proponent -->
&lt;!ELEMENT docProponent @inline; >
&lt;!ATTLIST docProponent as #ANYURI #IMPLIED >

&lt;!--- the element docDate is an inline element within preface to identify the string used by the document for its own date(s). Documents with multiple dates may use multiple docDate elements. -->
&lt;!ELEMENT docDate      @inline; >
&lt;!ATTLIST docDate      ##date; >
<include if="legislativePreface" dependsOn="core" label="Legislative preface elements " desc="Additional Preface elements for legislative documents such as $legislature, $session, $shortTitle.">
&lt;!--- the element legislature is an inline element within preface to identify the string used by the document for the legislature relative to the document. Use #refersTo to a TLCEvent to refer to the event of the specific legislature. -->
&lt;!ELEMENT legislature      @inline; >
&lt;!ATTLIST legislature      ##optvalue; >
&lt;!--- the element session is an inline element within preface to identify the string used by the document for the session of the legislature relative to the document. Use #refersTo to a TLCEvent to refer to the event of the specific session. -->
&lt;!ELEMENT session      @inline; >
&lt;!ATTLIST session   ##optvalue; >
&lt;!--- the element shortTitle is an inline element within preface to identify the string used by the document for the short title of the document. -->
&lt;!ELEMENT shortTitle      @inline; >
</include>
<include if="advancedPreface" dependsOn="core" label="Additional preface elements " desc="Additional Preface elements such as $docAuthority, $docPurpose, $docCommittee, $docIntroducer, $docStage, $docStatus and $docJurisdiction.">
&lt;!--- the element docAuthority is an inline element within preface to identify the string used by the document detailing the Auhtority to which the document was submitted -->
&lt;!ELEMENT docAuthority   @inline; >
&lt;!--- the element docPurpose is an inline element within preface to identify the string used by the document detailing its own purpose -->
&lt;!ELEMENT docPurpose   @inline; >
&lt;!--- the element docCommittee is an inline element within preface to identify the string used by the document detailing the committee within which the document originated -->
&lt;!ELEMENT docCommittee   @inline; >
&lt;!ATTLIST docCommittee   ##optvalue; >

&lt;!--- the element docIntroducer is an inline element within preface to identify the string used by the document detailing the individual introducing of the document -->
&lt;!ELEMENT docIntroducer   @inline; >
&lt;!--- the element docStage is an inline element within preface to identify the string used by the document detailing the stage in which the document sits -->
&lt;!ELEMENT docStage   @inline; >
&lt;!--- the element docStatus is an inline element within preface to identify the string used by the document detailing the status of the document -->
&lt;!ELEMENT docStatus   @inline; >
&lt;!--- the element docJurisdiction is an inline element within preface to identify the string used by the document detailing the jurisdiction of the document -->
&lt;!ELEMENT docJurisdiction   @inline; >
&lt;!--- the element docketNumber is an inline element within preface to identify the string used by the document for the number of the docket, case, file, etc which the document belongs to -->
&lt;!ELEMENT docketNumber    @inline; >
</include>
	
<include if="judgmentDocs" desc="Preface elements $courtType, $neutralCitation, $party and $judge">
&lt;!--- the element courtType is an inline element within judgments to identify the string used by the document for the type of the court doing the judgment -->
&lt;!ELEMENT courtType          @inline; >
&lt;!--- the element neutralCitation is an inline element within judgments to identify the string declared by the document as being the neutral citation for the judgment -->
&lt;!ELEMENT neutralCitation    @inline; >
&lt;!--- the element party is an inline element within judgments to identify where the document defines one of the parties -->
&lt;!ELEMENT party              @inlinereqreq; >
&lt;!ATTLIST party              ##role; >
&lt;!--- the element judge is an inline element within judgments to identify where the document defines one of the judges, and his/her role -->
&lt;!ELEMENT judge              @inlinereqreq; >
&lt;!ATTLIST judge              ##role; >
&lt;!--- the element lawyer is an inline element within judgments to identify where the document defines one of the lawyers, his/her role, which party it represents, and the other lawyer, if any, this lawyer received the power delegation of power in some role -->
&lt;!ELEMENT lawyer             @inlinereqreq; >
&lt;!ATTLIST lawyer             ##role; 
                             for         #ANYURI    #IMPLIED 
                             empoweredBy #ANYURI    #IMPLIED >
&lt;!--- the element opinion is an inline element within judgments to identify where the document defines the opinion of one of the judges -->
&lt;!ELEMENT opinion            @inline; >
&lt;!ATTLIST opinion            type  #opinionType; #IMPLIED>

&lt;!--- the element argument is an inline element within judgments for classifying the arguments in the motivation part of the judgment -->
&lt;!ELEMENT argument            @inline; >
</include>

<include desc="Element for document signature $signature"/>

&lt;!--- the element signature is an inline element within conclusions to identify where the document defines one of the signatures -->
&lt;!ELEMENT signature          @inline; >

<include if="semantic" dependsOn="core" label="Semantic inline elements" desc="Inline elements with a precise meaning: $date, $time, $entity, $person and $def">
&lt;!--- the element date is an inline element to identify a date expressed in the text and to propose a normalized representation in the date attribute. -->
&lt;!ELEMENT date               @inline; >
&lt;!ATTLIST date               ##date; >
&lt;!--- the element time is an inline element to identify a time expressed in the text and to propose a normalized representation in the time attribute. -->
&lt;!ELEMENT time               @inline; >
&lt;!ATTLIST time               ##time; >
&lt;!--- the element entity is a generic inline element to identify a text fragment introducing or referring to a concept in the ontology -->
&lt;!ELEMENT entity             @inlinereqreq; >
&lt;!ATTLIST entity             ##name; >
&lt;!--- the element person is an inline element to identify a text fragment introducing or referring to a person in the ontology. Attribute as allows to specify a TLCrole the person is holding in the context of the document's mention -->
&lt;!ELEMENT person             @inlinereqreq; >
&lt;!ATTLIST person					    as  #ANYURI  #IMPLIED >
&lt;!--- The element organization is an inline element to identify a text fragment introducing or referring to an organization in the ontology -->
&lt;!ELEMENT organization  @inlinereqreq; >
&lt;!--- The element concept is is an inline element to identify a text fragment introducing or referring to a concept in the ontology -->
&lt;!ELEMENT concept       @inlinereqreq; >
&lt;!--- The element object is is an inline element to identify a text fragment introducing or referring to an object in the ontology -->
&lt;!ELEMENT object        @inlinereqreq; >
&lt;!--- The element event is an inline element to identify a text fragment introducing or referring to an event in the ontology -->
&lt;!ELEMENT event         @inlinereqreq; >
&lt;!--- The element location is an inline element to identify a text fragment introducing or referring to a location in the ontology -->
&lt;!ELEMENT location         @inlinereqreq; >
&lt;!--- The element process is an inline element to identify a text fragment introducing or referring to a process in the ontology -->
&lt;!ELEMENT process       @inlinereqreq; >
&lt;!--- The element role is an inline element to identify a text fragment introducing or referring to a role in the ontology -->
&lt;!ELEMENT role          @inlinereqreq; >
&lt;!--- The element term is an inline element to identify a text fragment introducing or referring to a term in the ontology -->
&lt;!ELEMENT term          @inlinereqreq; >
&lt;!--- The element quantity is an inline element to identify a text fragment introducing or referring to a quantity. This could be a dimensionless number, or a number referring to a length, weight, duration, etc. or even a sum of money. The attribute normalized contains the value normalized in a number, if appropriate. -->
&lt;!ELEMENT quantity          @inlinereqreq; >
&lt;!ATTLIST quantity					normalized  #STRING  #IMPLIED >

&lt;!--- the element def is an inline element used for the definition of a term used in the rest of the document-->
&lt;!ELEMENT def          @inline; >
</include>
<include desc="Simple legal reference $ref"/>

&lt;!--- the element ref is an inline element containing a legal references (i.e. a reference to a document with legal status and for which an Akoma Ntoso IRI exists)  -->
&lt;!ELEMENT ref          @inlinereq; >
&lt;!ATTLIST ref          ##link; >

<include if="advancedRefs" dependsOn="core" label="Advanced references" desc="Elements for sophisticated legal references $mref (multiple references) and $rref (range of references)" >
&lt;!--- the element mref is an inline element containing multiple references (each in turn represented by a ref element) -->
&lt;!ELEMENT mref         @inline; >
&lt;!--- the element rref is an inline element containing a range of references between the IRI specified in the href attribute and the one specified in the upTo attribute. -->
&lt;!ELEMENT rref         @inlinereq; >
&lt;!ATTLIST rref      from   #ANYURI        #REQUIRED  
                       upTo   #ANYURI        #REQUIRED >
</include>
	
<include if="modifications" dependsOn="legislativeDocs" label="Modifications" desc="elements for modification acts $mod, $mmod, $rmod, $quotedText and $quotedStructure">                       
&lt;!--- the complex type modType specifies the content that is allowed within mod, mmod and rmod elements, i.e. it adds quotedText and quotedStructure to the normal list of inline elements -->
&lt;!ENTITY @ modType  "(#PCDATA | @@inlineCM; | quotedText | quotedStructure)*" "##corereq;" >
&lt;!--- the element mod is an inline element containing the specification of a modification on another document -->
&lt;!ELEMENT mod   @modType;>
&lt;!--- the element mmod is an inline element containing multiple specifications of modifications on another document -->
&lt;!ELEMENT mmod  @modType;>
&lt;!--- the element rmod is an inline element containing the specification of a range of modifications on another document -->
&lt;!ELEMENT rmod  @modType;>
&lt;!ATTLIST rmod  from   #ANYURI        #REQUIRED
                   upTo   #ANYURI        #REQUIRED >

&lt;!--- the element quotedText is an inline element containing a small string that is used either as the text being replaced, or the replacement, or the positioning at which some modification should take place. Attribute quote is used to specify the quote character used in the original; no quote attribute implies that the quote is left in the text; quote="" implies that there is no quote character. Attribute for is used in a mmod or rmod to point to the currentId of the corresponding ref element. -->
&lt;!ELEMENT quotedText       @inline; >
&lt;!ATTLIST quotedText       ##quote; 
															for #ANYURI #IMPLIED>

</include>
<include if="debateDocs" desc="inline element $remark for editorial remarks (e.g., applauses, laughters, etc.) and element $recordedTime to explicit mention a time in a debate">
&lt;!--- the element remark is an inline element for the specification of editorial remarks (e.g., applauses, laughters, etc.) especially within debate records -->
&lt;!ELEMENT remark       @inline; >
&lt;!ATTLIST remark       type #remarkType; #IMPLIED >
&lt;!--- the element recordedTime is an inline element for the specification of an explicit mention of a time (e.g., in a debate) -->
&lt;!ELEMENT recordedTime   @inline; >
&lt;!ATTLIST recordedTime   type #timeType; #IMPLIED
                         ##time; >
</include>

<include if="publishing" dependsOn="core" label="Elements for publishing" desc="inline elements for the specification of publishing additions such as $ins, $del and $omissis">
&lt;!--- the element ins is an inline element for the specification of editorial insertions -->
&lt;!ELEMENT ins          @inline; >
&lt;!--- the element del is an inline element for the specification of editorial deletions -->
&lt;!ELEMENT del          @inline; >
&lt;!--- the element omissis is an inline element for the specification of a text that substitutes a textual omission (e.g., dots, spaces, the word "omissis", etc.  -->
&lt;!ELEMENT omissis      @inline; >
</include>
<include if="specials" dependsOn="core" label="Special elements" desc="Special elements are two elements used in specific circumnstances, such as $placeholder, an inline element containing the text of a computable expression (e.g., '30 days after the publication of this act') that can be replaced editorially with an actual value and $fillIn, an inline element to represent (e.g., as a dotted line) the space where a person can fill in a value for a printed form, and decoration, a part of the numbering of a fragment that is carrying additional functions rather than just the numberi (e.g., in Switzerland, the annotation 'new' aside of a modified fragment)">
&lt;!--- the element placeholder is an inline element containing the text of a computable expression (e.g., '30 days after the publication of this act') that can be replaced editorially with an actual value -->
&lt;!ELEMENT placeholder  @inline; >
&lt;!ATTLIST placeholder originalText #STRING #IMPLIED >
&lt;!--- the element fillIn is an inline element shown as a dotted line or any other typoaphical characteristics to represent a fill-in element in a printed form, that is as ane example of an actual form. It is NOT meant to be used for form elements as in HTML, i.e. as a way to collect input from the reader and deliver to some server-side process. -->
&lt;!ELEMENT fillIn  @inline; >
&lt;!ATTLIST fillIn  width #STRING #IMPLIED >
&lt;!--- the element decoration is an inline element to represent a decorative aspect that is present in the orignal text and that is meant as additional information to the text (e.g., the annotation 'new' on the side of a freshly inserted structure. -->
&lt;!ELEMENT decoration  @inline; >
</include>
	
&lt;!-- =====================================================================

        AN marker elements
        Comment: AN-specific marker elements are connected to the 
        identification of locations within the legal structure, anywhere where 
        there is text. 
        
     ===================================================================== -->
<include desc="References to end notes $noteRef"/>

&lt;!--- the element noteRef is a reference to a editorial note placed in the notes metadata section -->
&lt;!ELEMENT noteRef      @markeropt; >
&lt;!ATTLIST noteRef      ##notes; ##link;>

<include if="delimiters"  dependsOn="core" label="Typographical delimiters" desc="Elements for the definition of typographical delimitation of line ($eol) and page ($eop)">
&lt;!--- the complex type eolType is shared by eol and eop elements as being able to specify a position within the next word in which the break can happen -->
&lt;!ENTITY @ eolType  "@markeropt;" "breakat  #INTEGER #IMPLIED">
&lt;!--- the element eol (end of line) is a marker for where in the original text the line breaks. If the line breaks within a word, place the element BEFORE the word and place the number of characters before the break in the attribute breakat -->
&lt;!ELEMENT eol   @eolType; >
&lt;!--- the element eop (end of page) is a marker for where in the original text the page breaks. Do NOT use a eol element, too. If the page breaks within a word, place the element BEFORE the word and place the number of characters before the break in the attribute breakat -->
&lt;!ELEMENT eop   @eolType; >
</include>
	
&lt;!-- =====================================================================

        AN subFlow elements
        Comment: AN-specific subFlow elements are connected to the 
        identification of structural elements that contain full structures 
        within a text content, but are not of textual nature.

     ===================================================================== -->

&lt;!--- the type subFlowStructure specifies the overall content model of the elements that are subFlows -->
&lt;!ENTITY @ subFlowStructure "(
              @@documentType; | (
							@@blockElements; | 
							@@containerElements; 
	            <include if="table" v="| tr | th | td"/>
							<include if="legislativeDocs" v="| @@hierElements; | content"/>
							<include if="debateDocs" v="| @@ANcontainers;"/> 
							<include if="prefaceSubstructures" v="| formula | recitals | citations | longTitle | recital | citation"/>
							<include if="components" v="| componentRef | documentRef"/>
							|	intro | wrap | heading | subheading | num  )+)" "##corereq; ">

<include if="modifications" dependsOn="legislativeDocs">
&lt;!--- the element quotedStructure is a subFlow element containing a full structure proposed as an insertion or a replacement. Attribute quote is used to specify the quote character used in the original; no quote attribute implies that the quote is left in the text; quote="" implies that there is no quote character. Attribute for is used in a mmod or rmod to point to the currentId of the corresponding ref element. -->
&lt;!ELEMENT quotedStructure   @subFlowStructure;>
&lt;!ATTLIST quotedStructure  ##quote;
                              for #ANYURI #IMPLIED>

</include>
<include if="extract" dependsOn="core" label="Extracts" desc="inline and subFlow elements $extractStructure and $extractText for the specification of extracts from other documents.">

&lt;!--- the element extractText is an inline element containing a string used as an extract from another document. Attribute quote is used to specify the quote character used in the original; no quote attribute implies that the quote is left in the text; quote="" implies that there is no quote character.  -->
&lt;!ELEMENT extractText        @inline; >
&lt;!ATTLIST extractText        ##quote; >
&lt;!--- the element extractStructure is a subFlow element containing a full structure used as an extract from another document or position. Attribute quote is used to specify the quote character used in the original; no quote attribute implies that the quote is left in the text; quote="" implies that there is no quote character. Attribute for is used in a mmod or rmod to point to the currentId of the corresponding ref element. -->
&lt;!ELEMENT extractStructure   @subFlowStructure;>
&lt;!ATTLIST extractStructure   ##quote; >

</include>

<include if="authorialNote" dependsOn="core" label="Authorial Note" desc="Element $authorialNote for the specification of authoritative (non-editorial) notes that are out of the main flow of the text, yet are part of the official authoritative text." >
&lt;!--- the element authorialNote is a subFlow element containing an authorial (non-editorial) note in the main flow of the text. -->
&lt;!ELEMENT authorialNote   @subFlowStructure;>
&lt;!ATTLIST authorialNote   ##notes;>
<include if="generic">
&lt;!ELEMENT subFlow    @subFlowStructure;>
</include>
</include>

<include if="additionalGeneric" dependsOn="core" label="Additional generic containers" desc="Element $foreign for the inclusion of structures not expressable with Akoma Ntoso (such as SVG graphics or MathML mathematical formulas)">
&lt;!--- the element foreign is a generic container for elements not belonging to the Akoma Ntoso namespace (e.g., mathematical formulas). It is a block element and thus can be placed in a container.  -->
&lt;!ELEMENT foreign    @anyOtherType; >
</include>
	
<include if="generic" dependsOn="core" label="Generic elements" desc="Non-specific elements that can be applied to any context as long as they respect the corresponding type of content model: $hcontainer, $container, $block, $inline, $marker">
&lt;!-- =====================================================================

        Generic elements 
        Comment: All elements in this schema fall under one of five
        content models: hierarchical container, container, block, inline 
        and mark. Besides named elements, the schema also provides for a 
        generic element for each of them, that can be used for markup that 
        fits the content models but can be specified by a precise name that 
        is not used in this schema. The 'name' attribute must be used for 
        naming the element. 
        It is also a characteristic of this schema that all named elements 
        are equivalent, and can be substituted to, the corresponding generic 
        element with their name as the value of the name attribute. Thus, by 
        definition, &lt;p> = &lt;block name="p">, &lt;part> = &lt;hcontainer name="part">, 
        &lt;act> = &lt;container name="act">, etc.
        Pattern: Generic Document + Role Attribute
        Reference: http://www.xmlpatterns.com/GenericDocumentMain.shtml + 
                   http://www.xmlpatterns.com/RoleAttributeMain.shtml

     ===================================================================== -->

<include if="legislativeDocs">
&lt;!--- the element hcontainer is a generic element for a hierarchical container. It can be placed in a hierarchy instead of any of the other hierarchical containers. The attribute name is required and gives a name to the element.  -->
&lt;!ELEMENT hcontainer @hierarchy; >
&lt;!ATTLIST hcontainer ##name; >
</include>
&lt;!--- the complex type containerType is the content model for the generic element for a container. It can be placed in a container instead of any of the other containers. The attribute name is required and gives a name to the element. -->
&lt;!ENTITY @ containerType  "(@@blockElements; | container)+" "##corereq; ##name;">

&lt;!--- the element container is a generic element for a container.  -->
&lt;!ELEMENT container  @containerType; >

&lt;!--- the element block is a generic element for a container. It can be placed in a container instead of any of the other blocks. The attribute name is required and gives a name to the element. -->
&lt;!ELEMENT block      @inline; >
&lt;!ATTLIST block      ##name; >
&lt;!--- the element inline is a generic element for an inline. It can be placed inside a block instead of any of the other inlines. The attribute name is required and gives a name to the element. -->
&lt;!ELEMENT inline     @inline; >
&lt;!ATTLIST inline     ##name; >
&lt;!--- the element marker is a generic element for a marker. It can be placed in a block instead of any of the other markers. The attribute name is required and gives a name to the element. -->
&lt;!ELEMENT marker     @markerreq; >
&lt;!ATTLIST marker     ##name; >

</include>
	
&lt;!-- =====================================================================

        HTML elements
        Comment: Many elements are drawn directly from HTML 4.0
        Pattern: Reuse Document Types (partial)
        Reference: http://www.xmlpatterns.com/ReuseDocumentTypesMain.shtml

     ===================================================================== -->
<include desc="Basic generic container, block and inline from HTML: $div, $p, $span and $br"/>

&lt;!--- The element div is an HTML element, but is NOT used in Akoma Ntoso as in HTML. Instead of being used as a generic block, Akoma Ntoso uses div as a generic container (as in common practice) -->
&lt;!ELEMENT div  @blocksreq; >
&lt;!--- The element p is an HTML element and is used in Akoma Ntoso as in HTML, for the generic paragraph of text (a block) -->
&lt;!ELEMENT p    @inline; >
&lt;!--- The element span is an HTML element and is used in Akoma Ntoso as in HTML, for the generic inline -->
&lt;!ELEMENT span @inline; >
&lt;!--- The element br is an HTML element and is used in Akoma Ntoso as in HTML, for the breaking of a line -->
&lt;!ELEMENT br @markeropt; >

<include if="html" dependsOn="core" label="Elements from HTML" desc="Elements introduced in HTML used here with the same meaning and purpose: $b, $i, $u, $sup, $sub, $a, $img, $ul, $ol, $li">
&lt;!--- The element b is an HTML element and is used in Akoma Ntoso as in HTML, for the bold style (an inline) -->
&lt;!ELEMENT b    @inline; >
&lt;!--- The element i is an HTML element and is used in Akoma Ntoso as in HTML, for the italic style (an inline) -->
&lt;!ELEMENT i    @inline; >
&lt;!--- The element u is an HTML element and is used in Akoma Ntoso as in HTML, for the underline style (an inline) -->
&lt;!ELEMENT u    @inline; >
&lt;!--- The element sup is an HTML element and is used in Akoma Ntoso as in HTML, for the superscript style (an inline) -->
&lt;!ELEMENT sup    @inline; >
&lt;!--- The element sub is an HTML element and is used in Akoma Ntoso as in HTML, for the subscript style (an inline) -->
&lt;!ELEMENT sub    @inline; >
&lt;!--- The element abbr is an HTML element and is used in Akoma Ntoso as in HTML, for the specification of an abbreviation or an acronym (an inline). As in HTML, use attribute title to specify the full expansion of the abbreviation or acronym. -->
&lt;!ELEMENT abbr    @inline; >
&lt;!--- The element a is an HTML element and is used in Akoma Ntoso as in HTML, for the generic link to a web resource (NOT to an Akoma Ntoso document: use ref for that). It is an inline. -->
&lt;!ELEMENT a    @inline; >
&lt;!ATTLIST a
    ##link;
    target    #STRING    #IMPLIED
>

&lt;!--- The element img is an HTML element and is used in Akoma Ntoso as in HTML, for including an image. It is a marker. -->
&lt;!ELEMENT img @markeropt;>
&lt;!ATTLIST img
    ##src;
    width  #INTEGER      #IMPLIED
    height #INTEGER      #IMPLIED
>

&lt;!--- the complex type listItems specifies the content model of elements ul and ol, and specifies just a sequence of list items (elements li). -->
&lt;!ENTITY @ listItems "(li+)" "##corereq;">
&lt;!--- The element ul is an HTML element and is used in Akoma Ntoso as in HTML, for an unordered list of list item (elements li) -->
&lt;!ELEMENT ul   @listItems; >
&lt;!--- The element ol is an HTML element and is used in Akoma Ntoso as in HTML, for an ordered list of list item (elements li) -->
&lt;!ELEMENT ol   @listItems; >
&lt;!--- The element li is an HTML element and is used in Akoma Ntoso as in HTML, for the generic list item (not a pattern) -->
&lt;!ELEMENT li   (#PCDATA | @@inlineCM; | ul | ol | p)* >
&lt;!ATTLIST li   ##optvalue;  ##coreopt;>

</include>
<include if="table" dependsOn="core" label="HTML table model" desc="Elements for table structures taken from HTML: $table, $tr, $th, $td">
&lt;!--- The element table is an HTML element and is used in Akoma Ntoso as in HTML, for a table of rows and columns of data -->
&lt;!ELEMENT table (caption?, tr+)>
&lt;!ATTLIST table
    ##corereq;
    width       #INTEGER #IMPLIED
    border      #INTEGER #IMPLIED
    cellspacing #INTEGER #IMPLIED
    cellpadding #INTEGER #IMPLIED
>

&lt;!--- The element caption is an HTML element and is used in Akoma Ntoso as in HTML, for the caption of a table (a block) -->
&lt;!ELEMENT caption    @inline; >

&lt;!--- The element tr is an HTML element and is used in Akoma Ntoso as in HTML, for a row of cells of a table -->
&lt;!ELEMENT tr (th | td)+>
&lt;!ATTLIST tr
    ##coreopt;
>
&lt;!--- The element th is an HTML element and is used in Akoma Ntoso as in HTML, for a header cell of a table -->
&lt;!ELEMENT th @blocksopt;>
&lt;!ATTLIST th  ##cellattrs; >

&lt;!--- The element td is an HTML element and is used in Akoma Ntoso as in HTML, for a data cell of a table -->
&lt;!ELEMENT td @blocksopt;>
&lt;!ATTLIST td  ##cellattrs; >
</include>

&lt;!-- =====================================================================

        Metadata elements for all documents

     ===================================================================== -->
&lt;!--- The element meta is the overall container of all metadata elements. It contains all specific metadata containers. -->
&lt;!ELEMENT meta             (identification, publication?, classification*, <include if="advancedMetadata" v="lifecycle*, workflow*, "/>
                            <include if="analysis" v="analysis*, "/> temporalData*, references*, notes* <include if="additionalGeneric" v=", proprietary*, presentation*"/>) >

<include desc="Basic metadata elements for FRBR levels: $FRBRWork, $FRBRExpression, $FRBRManifestation, $FRBRItem"/>
&lt;!--- The element identification is the metadata container of identifying information of the document according to the FRBR hierarchy -->
&lt;!ELEMENT identification   (FRBRWork, FRBRExpression, FRBRManifestation, FRBRItem?) >
&lt;!ATTLIST identification   ##source; >

&lt;!--- The complexType coreProperties lists the identifying properties available at any of the FRBR hierarchy levels. -->
&lt;!ENTITY @ coreProperties   "(FRBRthis, FRBRuri+, FRBRalias*, FRBRdate+, FRBRauthor+ <include if="advancedMetadata" v=", componentInfo?, preservation?"/>)" >
&lt;!--- The group workProperties lists the properties that are characteristics of the FRBR Work level. -->
&lt;!ENTITY @@ workProperties   "(FRBRcountry, FRBRsubtype?, FRBRnumber*, FRBRname*, FRBRprescriptive?, FRBRauthoritative?)" >
&lt;!--- The group exprProperties lists the properties that are characteristics of the FRBR Expression level. -->
&lt;!ENTITY @@ exprProperties   "(FRBRauthoritative?, FRBRlanguage+, FRBRtranslation*)" >
&lt;!--- The group manifProperties lists the properties that are characteristics of the FRBR Expression level. -->
&lt;!ENTITY @@ manifProperties   "(FRBRformat?)" >

&lt;!--- The element FRBRWork is the metadata container of identifying properties related to the Work level according to the FRBR hierarchy -->
&lt;!ELEMENT FRBRWork             (@coreProperties;, (@@workProperties;)) >
&lt;!--- The element FRBRExpression is the metadata container of identifying properties related to the Expression level according to the FRBR hierarchy -->
&lt;!ELEMENT FRBRExpression       (@coreProperties;, (@@exprProperties;)) >
&lt;!--- The element FRBRManifestation is the metadata container of identifying properties related to the Manifestation level according to the FRBR hierarchy -->
&lt;!ELEMENT FRBRManifestation    (@coreProperties;, (@@manifProperties;)) >
&lt;!--- The element FRBRItem is the metadata container of identifying properties related to the Item level according to the FRBR hierarchy. -->
&lt;!ELEMENT FRBRItem             @coreProperties; >

&lt;!--- The type valueType specifies a value attribute to FRBR elements. -->
&lt;!ENTITY @ valueType   "@metaopt;" "##value; ##refers; ##showopt;" >
&lt;!--- The type booleanValueType specifies a boolean value attribute to FRBR elements. -->
&lt;!ENTITY @ booleanValueType   "@metaopt;" "##booleanvalue;" >
&lt;!--- The element FRBRthis is the metadata property containing the IRI of the specific component of the document in the respective level of the FRBR hierarchy -->
&lt;!ELEMENT FRBRthis             @valueType;>
&lt;!--- The element FRBRuri is the metadata property containing the IRI of the whole document in the respective level of the FRBR hierarchy -->
&lt;!ELEMENT FRBRuri              @valueType;>
&lt;!--- The element FRBRalias is the metadata property containing additional well-known names of the document in the respective level of the FRBR hierarchy -->
&lt;!ELEMENT FRBRalias            @valueType; >
&lt;!ATTLIST FRBRalias            ##name; >

&lt;!--- The element FRBRdate is the metadata property containing a relevant date of the document in the respective level of the FRBR hierarchy. Attribute name specifies which actual date is contained here. -->
&lt;!ELEMENT FRBRdate             @metaopt;>
&lt;!ATTLIST FRBRdate             ##date; ##name; >
&lt;!--- The element FRBRauthor is the metadata property containing a relevant author of the document in the respective level of the FRBR hierarchy. Attribute as specifies the role of the author. -->
&lt;!ELEMENT FRBRauthor           @metaopt;>
&lt;!ATTLIST FRBRauthor           ##link; 
                              as #ANYURI  #IMPLIED >
&lt;!--- The element FRBRlanguage is the metadata property containing a RFC4646 (three-letter code) of the main human language used in the content of this expression -->
&lt;!ELEMENT FRBRlanguage            @metaopt;>
&lt;!ATTLIST FRBRlanguage            language #language; #REQUIRED >

&lt;!--- The element FRBRtranslation is the metadata property specifying the source of which this expression is a translation of. -->
&lt;!ELEMENT FRBRtranslation      @metaopt;>
&lt;!ATTLIST FRBRtranslation      ##link;
                                  fromLanguage #language; #REQUIRED
                                  authoritative #BOOLEAN #IMPLIED
                                  pivot        #language; #IMPLIED
                                  by   #ANYURI   #REQUIRED >

&lt;!--- The element FRBRsubtype is the metadata property containing a string for the specific subtype of the document to be used in the work-level IRI of this document -->
&lt;!ELEMENT FRBRsubtype            @valueType;>
&lt;!--- The element FRBRcountry is the metadata property containing a ISO 3166-1 Alpha-2 code for the country or jurisdiction to be used in the work-level IRI of this document-->
&lt;!ELEMENT FRBRcountry            @valueType;>
&lt;!--- The element FRBRnumber is the metadata property containing a string or number for the number to be used in the work-level IRI of this document -->
&lt;!ELEMENT FRBRnumber            @valueType;>
&lt;!--- The element FRBRname is the metadata property containing a string for the title to be used in the work-level IRI of this document -->
&lt;!ELEMENT FRBRname            @valueType;>
&lt;!--- The element FRBRformat is the metadata property containing a string for the data format to be used in the manifestation-level IRI of this document -->
&lt;!ELEMENT FRBRformat            @valueType;>
&lt;!--- The element FRBRprescriptive is the metadata property containing a boolean value to determine whether the document contains prescriptive text (i.e., text that is or might become prescriptive, such as an act or a bill) or not (such as, for instance, a non-normative resolution from an assembly. -->
&lt;!ELEMENT FRBRprescriptive      @booleanValueType;>
&lt;!--- The element FRBRauthoritative is the metadata property containing a boolean value to determine whether the document contains authoritative text (i.e., content that is the official, authoritative product of an official workflow from an entity that is entrusted with generating an official, authoriative version of the document. -->
&lt;!ELEMENT FRBRauthoritative      @booleanValueType;>

<include if="advancedMetadata" dependsOn="core" label="Advanced metadata" desc="Advanced metadata specifications for specific needs: $componentInfo and $preservation">
&lt;!--- The element components is the metadata property containing a list of component elements in the respective level of the FRBR hierarchy. -->
&lt;!ELEMENT componentInfo          (componentData)* >
&lt;!--- The element component is the metadata property specifying a component of the document in the respective level of the FRBR hierarchy. Component elements can conytain other components. -->
&lt;!ELEMENT componentData           (componentData)* >
&lt;!ATTLIST componentData           ##core; ##idreq; ##name; ##link; ##show;>  
&lt;!--- The element preservation is the metadata property containing an arbitrary list of elements detailing the preservation actions taken for the document is the respective level of the FRBR hierarchy.. -->
&lt;!ELEMENT preservation        @anyOtherType; >
</include>


<include desc="Basic metadata elements for libraries: $publication and $classification"/>

&lt;!--- The element publication is the metadata container specifying a publication event for the FRBR expression of the document. -->
&lt;!ELEMENT publication      @metaopt; >
&lt;!ATTLIST publication      ##date; ##show; ##name; ##number; ##refers; >

&lt;!--- The element classification is the metadata container of a list of keywords associated to the FRBR expression of the document. -->
&lt;!ELEMENT classification   (keyword+)>
&lt;!ATTLIST classification   ##source; >

&lt;!--- The element keyword is a metadata element specifying a keyword  associated to the FRBR expression of the document. Attribute dictionary (required) specifies the thesaurus out of which the keyword has been taken. Attribute href points to the fragment of text this keyword is associated to. Keywords without href attribute refer to the content as a whole. -->
&lt;!ELEMENT keyword @metaopt;>
&lt;!ATTLIST keyword 
						##linkopt; 
            ##value;
            ##show;
            dictionary  #ANYURI  #REQUIRED >

<include if="advancedMetadata" dependsOn="core" desc="Elements for the specification of $lifecycle and $workflow of documents">
&lt;!--- The element lifecycle is a metadata container of the events associated to the FRBR expression of the document. -->
&lt;!ELEMENT lifecycle (eventRef+)>
&lt;!ATTLIST lifecycle ##source; >
&lt;!--- The element eventInfo is a metadata element specifying facts about an event that had an effect on the document. For each event, a date, a type and a document that generated the event must be referenced.  -->
&lt;!ELEMENT eventRef @anyOtherType;>
&lt;!ATTLIST eventRef
    ##date;
    ##source;
    ##refers;
    type   #eventType; #IMPLIED
    originatingExpression #BOOLEAN #IMPLIED
>

&lt;!--- The element workflow is a metadata container of the steps associated to the workflow of the document. -->
&lt;!ELEMENT workflow   (step+)>
&lt;!ATTLIST workflow   ##source; >
&lt;!--- The element step is a metadata element specifying facts about a workflow step occurred to the document. For each event, a date, a type, an actor (and the corresponding role) that generated the action must be referenced. The outcome, too, can be specified. -->
&lt;!ELEMENT step     @anyOtherType;>
&lt;!ATTLIST step
    ##date;
    ##actor;
    ##role;
    ##refers;
    ##outcome;
>
</include>

<include if="analysis">
&lt;!--- The element analysis is a metadata container of all the analytical considerations on the document. Currently we deal with the analysis of modifcation events, of judgments and of votes in parliamentary documents -->
&lt;!ELEMENT analysis              (<include if="modifications" dependsOn="legislativeDocs" v="activeModifications?, passiveModifications?, "/>
<include if="restrictions" v="restrictions?, "/><include if="judgmentDocs" v="judicial?, "/> <include if="debateDocs" v="parliamentary?, "/> otherAnalysis*) >
&lt;!ATTLIST analysis              ##source; >

<include if="modifications"  dependsOn="legislativeDocs" desc="Metadata for the analysis of modification acts: amendments and relative metadata">
&lt;!--- The complex type Amendments is a list of all the amendment elements that can be used on a document analysis -->
&lt;!ENTITY @ Amendments          "(textualMod | meaningMod | scopeMod | forceMod | efficacyMod | legalSystemMod)+" >
&lt;!--- The complex type modificationType lists all the properties associated to modification elements. -->
&lt;!ENTITY @ modificationType    "(source+, destination+, force?, efficacy?, application?, duration?, condition?)" 
                               "##core; ##idreq; ##enactment; ##modifiers; ##refers;" >
                                 
&lt;!--- The simple type TextualMods lists all the types of textual modifications as values for the type attribute of the textualMod element. -->
&lt;!ENTITY # TextualMods         "#STRING(repeal|substitution|insertion|replacement|renumbering|split|join)" >
&lt;!--- The simple type MeaningMods lists all the types of modifications in meaning as values for the type attribute of the meaningMod element. -->
&lt;!ENTITY # MeaningMods         "#STRING(variation|termModification|authenticInterpretation)" >
&lt;!--- The simple type ScopeMods lists all the types of modifications in scope as values for the type attribute of the scopeMod element. -->
&lt;!ENTITY # ScopeMods           "#STRING(exceptionOfScope|extensionOfScope)" >
&lt;!--- The simple type ForceMods lists all the types of modifications in force as values for the type attribute of the forceMod element. -->
&lt;!ENTITY # ForceMods           "#STRING(entryIntoForce|endOfEnactment|postponementOfEntryIntoForce|
                                prorogationOfForce|reEnactment|uncostitutionality)" >
&lt;!--- The simple type EfficacyMods lists all the types of modifications in efficacy as values for the type attribute of the efficacyMod element. -->
&lt;!ENTITY # EfficacyMods        "#STRING(entryIntoEfficacy|endOfEfficacy|inapplication|retroactivity|extraefficacy|
                                postponementOfEfficacy|prorogationOfEfficacy)" >
&lt;!--- The simple type LegalSystemMods lists all the types of modifications in the legal system as values for the type attribute of the LegalSystemMod element. -->
&lt;!ENTITY # LegalSystemMods     "#STRING(staticReference|implementation|ratification|application|
                                legislativeDelegation|deregulation|conversion|expiration|
                                reiteration|remaking|republication|coordination)" >

&lt;!--- The element activeModifications is a metadata container of the active modifications generated by the document. -->
&lt;!ELEMENT activeModifications   @Amendments; >
&lt;!--- The element passiveModifications is a metadata container of the passive modifications affecting the document. -->
&lt;!ELEMENT passiveModifications  @Amendments; >
&lt;!--- The element textualMod is a metadata element specifying an (active or passive) textual modification for the document. -->
&lt;!ELEMENT textualMod            (@modificationType;, (old*, new*)) > 
&lt;!ATTLIST textualMod            type #TextualMods; #REQUIRED >
&lt;!--- The element meaningMod is a metadata element specifying an (active or passive) modification in meaning for the document. -->
&lt;!ELEMENT meaningMod            (@modificationType;, (domain?)) > 
&lt;!ATTLIST meaningMod            type #MeaningMods; #REQUIRED >
&lt;!--- The element scopeMod is a metadata element specifying an (active or passive) modification in scope for the document. -->
&lt;!ELEMENT scopeMod              (@modificationType;, (domain?)) > 
&lt;!ATTLIST scopeMod              type #ScopeMods; #REQUIRED >
&lt;!--- The element forceMod is a metadata element specifying an (active or passive) modification in force for the document. -->
&lt;!ELEMENT forceMod              @modificationType; > 
&lt;!ATTLIST forceMod              type #ForceMods; #REQUIRED >
&lt;!--- The element efficacyMod is a metadata element specifying an (active or passive) modification in efficacy for the document. -->
&lt;!ELEMENT efficacyMod           @modificationType; > 
&lt;!ATTLIST efficacyMod           type #EfficacyMods; #REQUIRED >
&lt;!--- The element legalSystemMod is a metadata element specifying an (active or passive) modification in the legal system for the document. -->
&lt;!ELEMENT legalSystemMod        @modificationType; > 
&lt;!ATTLIST legalSystemMod        type #LegalSystemMods; #REQUIRED >
</include>

<include if="judgmentDocs" desc="Metadata for the analysis of judgments: judicial arguments">
&lt;!--- The complex type judicialArguments is a list of all the judicial analysis elements that can be used on the analysis of a judgment -->
&lt;!ENTITY @ judicialArguments          "(result, (supports | isAnalogTo | applies | extends | restricts | derogates | contrasts | overrules | dissentsFrom | putsInQuestion | distinguishes)+)" >
&lt;!--- The complex type judicialArgumentType lists all the properties associated to judicial elements. -->
&lt;!ENTITY @ judicialArgumentType       "(source+, destination+, condition?)" 
                               "##core; ##idreq; ##enactment; ##modifiers; ##refers;" >

&lt;!--- The element judicial is a metadata container of the analysis of the judicial arguments of a judgment. -->
&lt;!ELEMENT judicial   @judicialArguments; >
&lt;!--- The element result is a metadata element specifying the overall result of the judgment. -->
&lt;!ELEMENT result   @anyOtherType; >
&lt;!ATTLIST result   type  #resultType; #REQUIRED >

&lt;!--- The element supports is a metadata element specifying a reference to a source supported by the argument being described. -->
&lt;!ELEMENT supports  @judicialArgumentType; >
&lt;!--- The element isAnalogTo is a metadata element specifying a reference to a source analog to the argument being described. -->
&lt;!ELEMENT isAnalogTo  @judicialArgumentType; >
&lt;!--- The element applies is a metadata element specifying a reference to a source applyed by the argument being described. -->
&lt;!ELEMENT applies  @judicialArgumentType; >
&lt;!--- The element extends is a metadata element specifying a reference to a source extended by the argument being described. -->
&lt;!ELEMENT extends  @judicialArgumentType; >
&lt;!--- The element restricts is a metadata element specifying a reference to a source restricted by the argument being described. -->
&lt;!ELEMENT restricts  @judicialArgumentType; >
&lt;!--- The element derogates is a metadata element specifying a reference to a source derogated by the argument being described. -->
&lt;!ELEMENT derogates  @judicialArgumentType; >
&lt;!--- The element contrasts is a metadata element specifying a reference to a source contrasted by the argument being described. -->
&lt;!ELEMENT contrasts  @judicialArgumentType; >
&lt;!--- The element overrules is a metadata element specifying a reference to a source overruled by the argument being described. -->
&lt;!ELEMENT overrules  @judicialArgumentType; >
&lt;!--- The element dissentsFrom is a metadata element specifying a reference to a source dissented from the argument being described. -->
&lt;!ELEMENT dissentsFrom  @judicialArgumentType; >
&lt;!--- The element putsInQuestions is a metadata element specifying a reference to a source questioned by the argument being described. -->
&lt;!ELEMENT putsInQuestion  @judicialArgumentType; >
&lt;!--- The element distinguishes is a metadata element specifying a reference to a source being distinguished by the argument being described. -->
&lt;!ELEMENT distinguishes  @judicialArgumentType; > 
</include>

<include if="restrictions" desc="Metadata for the analysis of jurisdictions and other types of restrictions of validity: restrictions">
&lt;!--- The element restrictions is a metadata container of the elements for the determination of specification of jurisdictions and other types of restrictions. -->
&lt;!ELEMENT restrictions   (restriction)+ >
&lt;!ATTLIST restrictions 	##source; >

&lt;!--- The element restriction specifies information about a restriction (such as a jurisdiction specification) by pointing to a specific legislative, geographic or temporal events through the -->
&lt;!ELEMENT restriction  	@anyOtherType; >
&lt;!ATTLIST restriction		##refers; 
                            type #restrictionType; #REQUIRED 
>


</include>
<include if="debateDocs" desc="Metadata for the analysis of debate: voting and quorum analysis">
&lt;!--- The complex type parliamentaryAnalysis is a list of all the parliamentary analysis elements that can be used on the analysis of a debate -->
&lt;!ENTITY @ parliamentaryAnalysis          "(quorumVerification | voting | recount)+" >
&lt;!--- The element parliamentary is a metadata container of the analysis of the events of a debate. -->
&lt;!ELEMENT parliamentary   @parliamentaryAnalysis; >

&lt;!--- The complex type parliamentaryAnalysisType lists all the properties associated to elements in the parliamentary analysis. -->
&lt;!ENTITY @ parliamentaryAnalysisType       "(quorum | count)+" 
                               "##core; ##idreq; ##outcome; ##refers; ##linkopt; " >
&lt;!--- The element quorumVerification is a metadata container containing information about an event of quorum verification happened within a debate. -->
&lt;!ELEMENT quorumVerification  @parliamentaryAnalysisType; >
&lt;!--- The element voting is a metadata container containing information about an event of a vote happened within a debate. -->
&lt;!ELEMENT voting   @parliamentaryAnalysisType; >
&lt;!--- The element recount is a metadata container containing information about an event of a recount happened within a debate. -->
&lt;!ELEMENT recount   @parliamentaryAnalysisType; >

&lt;!--- The complex type countType lists all the properties associated to elements of parliamentary count. -->
&lt;!ENTITY @ countType       "ANY{##other}" 
                              "##core; ##idreq; ##value; ##refers; ##linkopt; " >
&lt;!--- The element quorum is a metadata container containing the value of a quorum in a vote or a quorum verification. -->
&lt;!ELEMENT quorum  @countType; >
&lt;!--- The element count is a metadata container containing the value of a count in a vote or a quorum verification. -->
&lt;!ELEMENT count  @countType; >

</include>
	
&lt;!--- The element otherAnalysis is a metadata container of any additional metadata analysis element that does not belong to the specific categories provided before. Anything can be placed in this element.. -->
&lt;!ELEMENT otherAnalysis @anyOtherType; >
&lt;!ATTLIST otherAnalysis ##source; >


&lt;!--- The attribute pos is used to identify the specific position of the reference (e.g., in source or destination) 
with respect to the element being identified with the relative currentId. -->
&lt;!ENTITY ## pos "pos #posType; #IMPLIED">
&lt;!--- the complex type argumentType defines the empty content model and the list of attributes for metadata elements in the analysis section -->
&lt;!ENTITY @ argumentType      ""                            "##core; ##idopt; ##link; ##pos; ##modifiers; upTo   #ANYURI #IMPLIED" >
&lt;!--- the complex type periodType defines the empty content model and the list of attributes for metadata elements in the analysis section using periods -->
&lt;!ENTITY @ periodType        ""                            "##core; ##idopt; ##period;" >                 

&lt;!--- The element source is a metadata element specifying the IRI of the source of the modification. -->
&lt;!ELEMENT source           @argumentType;>
&lt;!--- The element destination is a metadata element specifying the IRI of the destination of the modification. -->
&lt;!ELEMENT destination      @argumentType;>
&lt;!--- The element force is a metadata element specifying the period of the force modification. -->
&lt;!ELEMENT force            @periodType; >
&lt;!--- The element efficacy is a metadata element specifying the period of the efficacy modification. -->
&lt;!ELEMENT efficacy         @periodType; >
&lt;!--- The element efficacy is a metadata element specifying the period of the efficacy modification. -->
&lt;!ELEMENT application      @periodType; >
&lt;!--- The element duration is a metadata element specifying the period of the duration modification. -->
&lt;!ELEMENT duration         @periodType; >
&lt;!--- The element condition is a metadata element specifying an open set (non managed by Akoma Ntoso) of conditions on the modification -->
&lt;!ELEMENT condition        @anyOtherType; >
&lt;!ATTLIST condition        frozen #BOOLEAN #IMPLIED >
&lt;!--- The element old is a metadata element containing (in some non-managed form) the old text of the modification. Attribute href points to the currentId of the element new it is being substituted by. -->
&lt;!ELEMENT old              @anyOtherType; >

&lt;!--- The element new is a metadata element containing (in some non-managed form) the new text of the modification. Attribute href points to the currentId of the element old it is substituting. -->
&lt;!ELEMENT new              @anyOtherType; >

&lt;!--- The element domain is a metadata element containing (in some non-managed form) the domain to which the modification applies. -->
&lt;!ELEMENT domain           @anyOtherType; >
</include>
	
<include desc="Basic metadata elements for ontological specification: $temporalData containing $timeIntervals, $references, all TLC elements, $notes"/>

&lt;!--- The element temporalData is a metadata container of all the temporal groups that cntain temporal information about any aspect of the document. In particular, versioned fragments of the text are assigned to temporal groups via the period attribute for the specification of in force or efficacy intervals, or any other type of temporal specification. -->
&lt;!ELEMENT temporalData  (temporalGroup+, renumberingInfo*) >
&lt;!ATTLIST temporalData     ##source; >

&lt;!-- The element temporalGroup contains a list of time Intervals that need to be applied together to an element of the document that is associated to time information. Each temporal group can contain any number of time interval associated via the refersTo to a different time-specific concept. --> 
&lt;!ELEMENT temporalGroup  (timeInterval+) >
&lt;!ATTLIST temporalGroup  ##core; ##idreq; >

&lt;!-- The element timeInterval contains all the data needed to identify a specific time interval. It is built either with two dates or with a date and a duration (exactly two of the 'start', 'end' and 'duration' attributes can be specified). Values of the 'start' and 'end' attributes are NOT dates, but references to event elements in the corresponding metadata section. The refers attribute is a reference to a temporal concept belonging to the Akoma Ntoso ontology and specified in the references section -->
&lt;!ELEMENT timeInterval  @metaopt; >
&lt;!ATTLIST   timeInterval     ##refersreq; 
    start           #ANYURI        #IMPLIED
    end             #ANYURI        #IMPLIED
    duration      #DURATION   #IMPLIED
>

&lt;!-- The element renumberingInfo contains a reference to the originalId (attribute original) and to thecurrentId (attribute current) of a structure during a time period included between an initial temporalGroup and a final temporalGroup. This is useful for ttracking the evolving ids of documetns frequently renumbered (e,g., bills). --> 
&lt;!ELEMENT renumberingInfo  @metareq; >
&lt;!ATTLIST renumberingInfo  
    original        #ANYURI        #IMPLIED
    current         #ANYURI        #IMPLIED
    start           #ANYURI        #IMPLIED
    end             #ANYURI        #IMPLIED
>


&lt;!--- The group docrefs is a list of types of legal references to documents. -->
&lt;!ENTITY @@ docRefs        "(original|passiveRef|activeRef|jurisprudence|hasAttachment|attachmentOf)" >
&lt;!--- The group TLCs is a list of types of Top Level classes of the Akoma Ntoso ontology. -->
&lt;!ENTITY @@ TLCs           "(TLCPerson|TLCOrganization|TLCConcept|TLCObject|TLCEvent|TLCLocation|TLCProcess|TLCRole|TLCTerm|TLCReference)" >
&lt;!--- The complex type refItems is a list of types of references used in the references section. -->
&lt;!ENTITY @ refItems       "(@@docRefs;|@@TLCs;)+" "##source;">

&lt;!--- The element references is a metadata container of all the references to entities external to the document mentioned in the document. They include references to legal documents of any form,a s well as references to people, organizations, events, roles, concepts, and anything else is managed by the Akoma Ntoso ontology. -->
&lt;!ELEMENT references     @refItems;>

&lt;!--- The element original is a metadata reference to the Akoma Ntoso IRI of the original version of this document (i.e., the first expression) -->
&lt;!ELEMENT original         @referenceType; >
&lt;!--- The element passiveRef is a metadata reference to the Akoma Ntoso IRI of a document providing modifications on this document (i.e., a passive references) -->
&lt;!ELEMENT passiveRef       @referenceType; >
&lt;!--- The element activeRef is a metadata reference to the Akoma Ntoso IRI of a document that is modified by this document (i.e., an active references) -->
&lt;!ELEMENT activeRef        @referenceType; >
&lt;!--- The element jurisprudence is a metadata reference to the Akoma Ntoso IRI of a document providing jurisprudence on this document -->
&lt;!ELEMENT jurisprudence    @referenceType; >
&lt;!--- The element hasAttachment is a metadata reference to the Akoma Ntoso IRI of an attachment of this document -->
&lt;!ELEMENT hasAttachment    @referenceType; >
&lt;!ATTLIST hasAttachment    type CDATA  #IMPLIED >
&lt;!--- The element attachmentOf is a metadata reference to the Akoma Ntoso IRI of a document of which this document is an attachment -->
&lt;!ELEMENT attachmentOf     @referenceType; >
&lt;!ATTLIST attachmentOf     type CDATA  #IMPLIED >

&lt;!--- The element TLCPerson is a metadata reference to the Akoma Ntoso IRI of an ontology instance of the class Person -->
&lt;!ELEMENT TLCPerson        @referenceType; >
&lt;!--- The element TLCOrganization is a metadata reference to the Akoma Ntoso IRI of an ontology instance of the class Organization -->
&lt;!ELEMENT TLCOrganization  @referenceType; >
&lt;!--- The element TLCConcept is a metadata reference to the Akoma Ntoso IRI of an ontology instance of the class Concept -->
&lt;!ELEMENT TLCConcept       @referenceType; >
&lt;!--- The element TLCObject is a metadata reference to the Akoma Ntoso IRI of an ontology instance of the class Object -->
&lt;!ELEMENT TLCObject        @referenceType; >
&lt;!--- The element TLCEvent is a metadata reference to the Akoma Ntoso IRI of an ontology instance of the class Event -->
&lt;!ELEMENT TLCEvent         @referenceType; >
&lt;!--- The element TLCLocation is a metadata reference to the Akoma Ntoso IRI of an ontology instance of the class Location -->
&lt;!ELEMENT TLCLocation         @referenceType; >
&lt;!--- The element TLCProcess is a metadata reference to the Akoma Ntoso IRI of an ontology instance of the class Process -->
&lt;!ELEMENT TLCProcess       @referenceType; >
&lt;!--- The element TLCRole is a metadata reference to the Akoma Ntoso IRI of an ontology instance of the class Role -->
&lt;!ELEMENT TLCRole          @referenceType; >
&lt;!--- The element TLCTerm is a metadata reference to the Akoma Ntoso IRI of an ontology instance of the class Term -->
&lt;!ELEMENT TLCTerm          @referenceType; >
&lt;!--- The element TLCreference is a generic metadata reference to the Akoma Ntoso IRI of an ontology instance of a class specified through the name attribute -->
&lt;!ELEMENT TLCReference     @referenceType; >
&lt;!ATTLIST TLCReference     ##name; >

&lt;!--- The element notes is a metadata container of all the note elements used as footnotes and endnotes in the document. -->
&lt;!ELEMENT notes        (note)+>
&lt;!ATTLIST notes        ##source; >
&lt;!--- The element note is a metadata element containing the text of the footnote and endnote specified. -->
&lt;!ELEMENT note         @blocksreq;>

<include if="additionalGeneric" dependsOn="core" desc="Container $proprietary for the specification of metadata elements not belonging to Akoma Ntoso and $presentation for the specification of presentations styles (e.g., CSS fragments) for the visual rendering of elements of the document">
&lt;!--- The element proprietary is a metadata container of any additional metadata property that does not belong to the Akoma Ntoso properties. Anything can be placed in this element. -->
&lt;!ELEMENT proprietary @anyOtherType; >
&lt;!ATTLIST proprietary ##source; >
&lt;!--- The element presentation is a metadata container of any presentation specification for the visual rendering of Akoam Ntoso elements. Anything can be placed in this element. -->
&lt;!ELEMENT presentation @anyOtherType; >
&lt;!ATTLIST presentation ##source; ></include>
	
<include if="components" dependsOn="core" label="Components" desc="Elements $components and $component for the specification of parts and fragments of composite documents"	>
&lt;!-- =====================================================================

        Components

     ===================================================================== -->
	
&lt;!--- The element components is a container of all components referred to in the main part of the document -->
&lt;!ELEMENT components (component)+ >

&lt;!--- The element component is a container of a subdocument specified in a composite document -->
&lt;!ELEMENT component (@@documentType;) >
&lt;!ATTLIST component ##core; ##idreq; >
</include>

&lt;!-- =====================================================================

        End of Schema

     ===================================================================== -->
 </modular>
