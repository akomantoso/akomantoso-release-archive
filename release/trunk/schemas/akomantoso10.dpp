<?xml version="1.0" encoding="UTF-8"?>
<!-- ===================================================================== 
       Akoma Ntoso main schema                                                  
                                                                           
                                                                           
       Tentative Release  07/10/2010
       technical supervision Fabio Vitali - University of Bologna
       legal domain supervision Monica Palmirani - University of Bologna
                                                                           
       The present schema uses systematically XML design patterns as       
       described in http://www.xmlpatterns.com/                            
       A few of them are explicitly mentioned, when their use or approach  
       was not felt clear or natural enough. Others are just used without  
       mentions. 
     ===================================================================== -->

<!TARGETNS          'http://www.akomantoso.org/1.0'>
<!TARGETNS  xml  'http://www.w3.org/XML/1998/namespace'>

<!-- =====================================================================

        Main element groups

     ===================================================================== -->

<!--- The group ANhier lists the elements that belong to the Akoma Ntoso hierarchy -->
<!ENTITY @@ ANhier          "(section|part|paragraph|chapter|title|book|tome|article|clause|subsection|subpart|subparagraph|subchapter|subtitle|subclause)" >
<!--- The group ANcontainers lists the elements that are containers and are specific to the Akoma Ntoso vocabulary -->
<!ENTITY @@ ANcontainers    "(speech | question | answer | other | scene )" >
<!--- The group ANblock lists the elements that are blocks and are specific to the Akoma Ntoso vocabulary -->
<!ENTITY @@ ANblock         "(toc | list | tblock)" >
<!--- The group ANinline lists the elements that are inline and are specific to the Akoma Ntoso vocabulary -->
<!ENTITY @@ ANinline        "(def | remark | ref | mref | rref | mod | mmod | rmod | ins | del | omissis)" >
<!--- The group ANtitleInline lists the elements that are inline, are specific to the Akoma Ntoso vocabulary, and should only be used within the title element -->
<!ENTITY @@ ANtitleInline   "(docType | docTitle | docNumber | docketNumber | docProponent | docDate | docPurpose|docCommittee|docIntroducer|docStage|docStatus|docJurisdiction)" >
<!--- The group ANheaderInline lists the elements that are inline, are specific to the Akoma Ntoso vocabulary, and should only be used within the header element -->
<!ENTITY @@ ANheaderInline  "(courtType | neutralCitation | party | judge | lawyer | signature | opinion)" >
<!--- The group ANotherInline lists additional elements that are inline, and are specific to the Akoma Ntoso vocabulary -->
<!ENTITY @@ ANotherInline   "(entity | date)" >
<!--- The group ANmarker lists the elements that are markers and are specific to the Akoma Ntoso vocabulary -->
<!ENTITY @@ ANmarker        "(noteRef | recordedTime | eol | eop )" >

<!--- The group HTMLcontainers lists the elements that are containers and were inherited from the HTML vocabulary -->
<!ENTITY @@ HTMLcontainers    "( div )" >
<!--- The group HTMLblock lists the elements that are blocks and were inherited from the HTML vocabulary -->
<!ENTITY @@ HTMLblock         "(p|ul|ol|table)" >
<!--- The group HTMLinline lists the elements that are inline and were inherited from the HTML vocabulary -->
<!ENTITY @@ HTMLinline        "(span | b | i | a)" >
<!--- The group HTMLmarker lists the elements that are marker and were inherited from the HTML vocabulary -->
<!ENTITY @@ HTMLmarker        "(img)" >

<!--- The group judgementBlock lists the structures that should be found in a judgement -->
<!ENTITY @@ judgementBlock    "(introduction | background | motivation | decision)">
<!--- The group speechSection lists the structures that should contain speeches -->
<!ENTITY @@ speechSection     "(administrationOfOath|declarationOfVote|communication|petitions|
papers|noticesOfMotion|questions|address|proceduralMotions|pointOfOrder|subdivision)">


<!--- The group hierElements lists all the elements that are hierarchical -->
<!ENTITY @@ hierElements      "(@@ANhier;       |                     hcontainer)">
<!--- The group containerElements lists all the elements that are containers -->
<!ENTITY @@ containerElements "(@@ANcontainers; | @@HTMLcontainers; | @@speechSection; | container)">
<!--- The group blockElements lists all the elements that are blocks -->
<!ENTITY @@ blockElements     "(@@ANblock;      | @@HTMLblock;      | block      | foreign)">
<!--- The group inlineElements lists all the elements that are inline -->
<!ENTITY @@ inlineElements    "(@@ANinline;     | @@HTMLinline;     | inline        | @@ANtitleInline; | @@ANheaderInline; | @@ANotherInline;)">
<!--- The group markerElements lists all the elements that are markers -->
<!ENTITY @@ markerElements    "(@@ANmarker;     | @@HTMLmarker;     | marker  )">

<!--- The group inlineCM is the content model of blocks and inlines, and is composed of all the inlines and all the markers -->
<!ENTITY @@ inlineCM          "(@@inlineElements; | @@markerElements;)">

<!-- =====================================================================

        Attribute groups

     ===================================================================== -->
     
<!--- The attribute name is used to give a name to all generic elements -->
<!ENTITY ## name         "name         #STRING        #REQUIRED" >
<!--- The attribute source links to the agent (person, organization) providing the specific annotation or markup -->
<!ENTITY ## source       "source       #ANYURI        #REQUIRED" >
<!--- The attribute date is used to give a normalized value for a date according to the XSD syntax YYYY-MM-DD -->
<!ENTITY ## date         "date         #DATE          #REQUIRED" >
<!--- The attribute time is used to give a normalized value for a time according to the XSD syntax HH:MM:SS -->
<!ENTITY ## time         "time         #TIME          #REQUIRED" >
<!--- The attribute authoritative specifies whether the element (notes and outofLine elements) is authoritative or not -->
<!ENTITY ## authoritative       "authoritative     #yesNoType;          #IMPLIED" >
<!--- The attribute href is used to specify an internal or external destination for a reference, a citation, an access to the ontology or a hypertext link. In elements using this attribute definition the href attribute is required -->
<!ENTITY ## link         "href         #ANYURI        #REQUIRED" >
<!--- The attribute href is used to specify an internal or external destination for a reference, a citation, an access to the ontology or a hypertext link. In elements using this attribute definition the href attribute is optional -->
<!ENTITY ## linkopt      "href         #ANYURI        #IMPLIED" >
<!--- The attribute value is used to specify a value for metadata elements. In elements using this attribute definition the value attribute is required -->
<!ENTITY ## value        "value        #STRING        #REQUIRED" >
<!--- The attribute value is used to specify a value for metadata elements. In elements using this attribute definition the value attribute is optional -->
<!ENTITY ## optvalue     "value        #STRING        #IMPLIED" >
<!--- These attributes are used in speeches to identify actors and roles of speeches. In particular, attribute 'by' identifies the speaker, optional attribute 'as' identifies the role under which the speaker is speaking, and  optional attribute to identifies the addressee of the speech. All of them are references to person or organization elements in the references section -->
<!ENTITY ## speechAtts   "by           #ANYURI        #REQUIRED 
                          as           #ANYURI        #IMPLIED
                          to           #ANYURI        #IMPLIED ">
<!--- These attributes are used in metadata to propose visible representations of the metadata itself. Both a full visualization (attribute showAs) and an abbreviated one (attribute shortForm) can be specified -->
<!ENTITY ## show         "showAs       #STRING        #REQUIRED  
                          shortForm    #STRING        #IMPLIED">
<!--- The period attribute is used in versioned content and metadata elements to indicate a time interval in which they were in force, in efficacy, or in any other type of interval as specified in the corresponding temporalGroup.  -->
<!ENTITY ## period "
    period           #ANYURI        #IMPLIED"
>
<!--- These attributes are those already defined in attribute list "period", plus the attribute status, that allows to specify the status of the piece of text it wraps.  -->
<!ENTITY ## enactment "
    ##period;
    status     #statusType;  #IMPLIED
">
<!--- These attributes are used in the analysis of amendments to allow manifestation editors to specify whether the analysis is complete and/or ignored in the text -->
<!ENTITY ## modifiers "
    exclusion  #BOOLEAN #IMPLIED
    incomplete #BOOLEAN #IMPLIED
">
<!--- The attribute role is used to identify the role of an individual mentioned in the text. It is a reference to a TLCRole element in the references section -->
<!ENTITY ## role "
    as #ANYURI #IMPLIED
">
<!--- The attribute actor is used to identify the actor of a step of a workflow of the document. It is a reference to a TLCPerson or TLCOrganization element in the references section -->
<!ENTITY ## actor "
    actor #ANYURI #IMPLIED
">
<!--- The attribute outcome is used to identify the outcome of a step in a workflow. It is a reference to a TLCConcept element in the references section -->
<!ENTITY ## outcome "
    outcome #ANYURI #IMPLIED
">


<!--- These attributes are used to specify that table cells span more than one row or one column, exactly as in HTML -->
<!ENTITY ## cellattrs    "rowspan      #INTEGER     '1'
                          colspan      #INTEGER     '1'  ">
<!--- These attributes are used to specify class, style and title of the element, exactly as in HTML -->
<!ENTITY ## HTMLattrs    "class        #STRING      #IMPLIED    
                          style        #STRING      #IMPLIED
                          title        #STRING      #IMPLIED">
<!--- This attribute identifies the element in an absolute manner. In elements using this attribute definition the id attribute is required -->
<!ENTITY ## idreq        "id           #ID           #REQUIRED">
<!--- This attribute identifies the element in an absolute manner. In elements using this attribute definition the id attribute is optional -->
<!ENTITY ## idopt        "id           #ID           #IMPLIED">

<!--- This attribute creates a connection between the element and an element of the Akoma Ntoso ontology to which it refers. In elements using this attribute definition the refersTo attribute is required -->
<!ENTITY ## refersreq    "refersTo           #ANYURI         #REQUIRED" >
<!--- This attribute creates a connection between the element and an element of the Akoma Ntoso ontology to which it refers. In elements using this attribute definition the refersTo attribute is optional -->
<!ENTITY ## refers       "refersTo           #ANYURI         #IMPLIED" >
<!--- This attribute specifies the human language in which the content of the element is expressed. Values are taken from the RFC 4646. xml:lang is a reserved attribute of XML, and cannot be used for any other purpose than this one.  -->
<!ENTITY ## xmllang       "xml:lang           #STRING         #IMPLIED" >
<!--- This attribute specifies the human language in which the document the element refers to is expressed. Values are taken from the RFC 4646.  -->
<!ENTITY ## lang       "language           #STRING         #IMPLIED" >

<!--- This is the list of the core attributes that all elements in the content part of the document must have. In elements using this attribute definition the refersTo attribute is optional but the id attribute is required -->
<!ENTITY ## corereq      "##HTMLattrs; ##enactment; ##idreq; ##refers; ##xmllang;" >
<!--- This is the list of the core attributes that all elements in the content part of the document must have. In elements using this attribute definition both the refersTo attribute and the id attribute are required -->
<!ENTITY ## corereqreq   "##HTMLattrs; ##enactment; ##idreq; ##refersreq; ##xmllang;" >
<!--- This is the list of the core attributes that all elements in the content part of the document must have. In elements using this attribute definition both the refersTo attribute and the id attribute are optional -->
<!ENTITY ## coreopt      "##HTMLattrs; ##enactment; ##idopt; ##refers; ##xmllang;" >

<!-- =====================================================================

        Simple types (data values)

     ===================================================================== -->
<!--- This is the list of allowed values for the authoritative attribute   -->
<!ENTITY # yesNoType    "#STRING(yes|no)" >
<!--- This is the list of allowed values for the contains attribute   -->
<!ENTITY # versionType    "#STRING(originalVersion|singleVersion|multipleVersions)" >
<!--- This is the list of allowed values for the type attribute of the event and action elements  -->
<!ENTITY # eventType      "#STRING(generation|amendment|repeal)" >
<!--- This is the list of allowed values for the status attribute   -->
<!ENTITY # statusType     "#STRING(omissis|repealed|suspended|editorial)">
<!--- This is the list of allowed values for the type attribute of the remark element  -->
<!ENTITY # remarkType     "#STRING(sceneDescription|phenomenon|caption|translation)">
<!--- This is the list of allowed values for the type attribute of the recordedTime element  -->
<!ENTITY # timeType       "#STRING(startEvent|endEvent)">
<!--- This is the list of allowed values for the type attribute of the outOfLine element  -->
<!ENTITY # outOfLineType  "#STRING(sideNote|publicationNote)">
<!--- This is the list of allowed values for the type attribute of the opinion element  -->
<!ENTITY # opinionType  "#STRING(dissenting|agreeing|null)">
<!--- This is the list of allowed values for the type attribute of the result element  -->
<!ENTITY # resultType  "#STRING(deny|dismiss|uphold|revert|replaceOrder|remit|decide|approve)">

<!-- =====================================================================

        Complex types (markup structures)

     ===================================================================== -->

<!--- The complex type basehierarchy is not used by any element, but is derived by other types to contain the basic structure of hierarchical elements   -->
<!ENTITY @ basehierarchy     "(num?, heading?, subheading?)" >
<!--- The complex type hierarchy is used by most or all the hierarchical elements of act-like documents. -->
<!ENTITY @ hierarchy         "@basehierarchy;, (@@hierElements;+ | content)"            "##corereq;">
<!--- The complex type althierarchy is used by most or all the hierarchical elements of documents that are not act-like. -->
<!ENTITY @ althierarchy      "@basehierarchy;, (@@containerElements;)*" "##corereq;">
<!--- the complex type blocksreq defines the content model and attributes shared by all containers. Here the id attribute is required -->
<!ENTITY @ blocksreq         "(@@blockElements;)+" "##corereq;">
<!--- the complex type blocksopt defines the content model and attributes shared by all containers. Here the id attribute is optional -->
<!ENTITY @ blocksopt         "(@@blockElements;)+" "##coreopt;">
<!--- the complex type inline defines the content model and attributes shared by all blocks and inlines. Here the id attribute is optional -->
<!ENTITY @ inline            "(#PCDATA | @@inlineCM;)*" "##coreopt;">
<!--- the complex type inlinereq defines the content model and attributes shared by all blocks and inlines. Here the id attribute is required -->
<!ENTITY @ inlinereq         "(#PCDATA | @@inlineCM;)*" "##corereq;">
<!--- the complex type inlinereq defines the content model and attributes shared by all blocks and inlines. Here the id attribute is required and also the refersTo is required -->
<!ENTITY @ inlinereqreq      "(#PCDATA | @@inlineCM;)*" "##corereqreq;">

<!--- the complex type markerreq defines the content model and attributes shared by all marker elements. Here the id attribute is required -->
<!ENTITY @ markerreq         "" "##corereq;">
<!--- the complex type markeropt defines the content model and attributes shared by all marker elements. Here the id attribute is optional -->
<!ENTITY @ markeropt         "" "##coreopt;">
<!--- the complex type metareq defines the content model and attributes shared by all metadata elements. Here the id attribute is required -->
<!ENTITY @ metareq           "" "##idreq;">
<!--- the complex type metaopt defines the content model and attributes shared by all metadata elements. Here the id attribute is optional -->
<!ENTITY @ metaopt           "" "##idopt;">

<!--- the complex type maincontent is used by container elements that can contain basically any other Akoma Ntoso structure -->
<!ENTITY @ maincontent       "(@@hierElements; | @@blockElements; | @@containerElements; )+" "##coreopt;" >

<!--- the complex type speechType defines the content model and attributes shared by all speech elements. Here the id attribute is optional -->
<!ENTITY @ speechType        "(from, (@@blockElements;)+)" "##coreopt; ##speechAtts;" >
<!--- the complex type referenceType defines the empty content model and the list of attributes for metadata elements in the references section -->
<!ENTITY @ referenceType     ""                            "##idreq; ##link; ##show;" >
<!--- the complex type anyOtherType defines an open content model for elements that may use elements from other namespaces. -->
<!ENTITY @ anyOtherType      "ANY{##other}"                "##idopt; ##linkopt;" >                 

<!-- =====================================================================

        Root element
        Comment: One generic root element contains all document elements
        Pattern: Universal Root 
        Reference: http://www.xmlpatterns.com/UniversalRootMain.shtml

     ===================================================================== -->


<!--- the group collectionDocs specifies all the document types that are collections of other documents, that may or may not be addressed individually. Many documents are of this type, such as individual issues of the official gazette, amendment lists, and many others -->
<!ENTITY @@ collectionDocs  "(amendmentList | officialGazette | documentCollection)" >
<!--- the group legislativeDocs specifies all the document types that are legislative in nature -->
<!ENTITY @@ legislativeDocs  "(act | bill)" >
<!--- the group judgementDocs specifies all the document types that are jurisprudential in nature -->
<!ENTITY @@ judgementDocs    "(judgement )" >
<!--- the group debateDocs specifies all the document types that are related to debates -->
<!ENTITY @@ debateDocs       "(report | debateRecord)" >

<!--- the type documentType lists all the document types that are managed by Akoma Ntoso -->
<!ENTITY @@ documentType      "(@@collectionDocs; |@@legislativeDocs; | @@debateDocs; | @@judgementDocs; | doc)">
<!--- the element akomaNtoso is the root element of all document types in Akoma Ntoso. It follows the pattern Universal Root (http://www.xmlpatterns.com/UniversalRootMain.shtml) -->
<!ROOT     akomaNtoso        (@@documentType;) >
          
<!-- =====================================================================

        Document elements
        Comment: All document elements share just two content models
        Pattern: Consistent Element Set
        Reference: http://www.xmlpatterns.com/ConsistentElementSetMain.shtml

     ===================================================================== -->

<!--- the type collectionStructure specifies the overall content model of the document types that are collections of other documents -->
<!ENTITY @ collectionStructure "(meta, 
                                   preface?,
                                   collectionContent, 
                                   conclusions?, 
                                   outOfLines?,
                                   attachments?)" 
                                 " contains #versionType; 'originalVersion'">

<!--- the type hierarchicalStructure specifies the overall content model of the document types that are hierarchical in nature, especially acts and bills -->
<!ENTITY @ hierarchicalStructure "(meta, 
                                   preface?,
                                   preamble?, 
                                   body, 
                                   conclusions?, 
                                   outOfLines?,
                                   attachments?)" 
                                 " contains #versionType; 'originalVersion'">

<!--- the type debateStructure specifies the overall content model of the document types that describe debates -->
<!ENTITY @ debateStructure        "(meta, 
                                   preface?,
                                   debate, 
                                   conclusions?, 
                                   outOfLines?,
                                   attachments?)" 
                                 " contains #versionType; 'originalVersion'">

<!--- the type judgementStructure specifies the overall content model of the document types that describe judgements -->
<!ENTITY @ judgementStructure     "(meta, 
                                   header,
                                   judgementBody, 
                                   conclusions, 
                                   outOfLines?,
                                   attachments?)" 
                                 " contains #versionType; 'originalVersion'">

<!--- the type openStructure specifies the overall content model of all the document types that do not have a specific and peculiar structure -->
<!ENTITY @ openStructure         "(meta, 
                                 preface?,
                                 preamble?, 
                                 mainContent, 
                                 conclusions?, 
                                 outOfLines?,
                                 attachments?)" 
                                 " contains #versionType; 'originalVersion'">
                                 
<!--- Element amendmentList is used for descriving the structure and content of a collection of amendments -->
<!ELEMENT amendmentList           @collectionStructure; >
<!--- Element officialGazette is used for descriving the structure and content of an issue of an official gazette -->
<!ELEMENT officialGazette           @collectionStructure; >
<!--- Element documentCollection is used for descriving the structure and content of a collection of other documents chosen and combined for any reason whatsoever -->
<!ELEMENT documentCollection           @collectionStructure; >
<!--- Element act is used for descriving the structure and content of an act -->
<!ELEMENT act           @hierarchicalStructure; >
<!--- Element bill is used for descriving the structure and content of a bill -->
<!ELEMENT bill          @hierarchicalStructure; >
<!--- Element report is used for descriving the structure and content of a report -->
<!ELEMENT report        @openStructure; >
<!--- Element debateRecord is used for descriving the structure and content of a debat record -->
<!ELEMENT debateRecord  @debateStructure; >
<!--- Element judgement is used for descriving the structure and content of a judgement -->
<!ELEMENT judgement     @judgementStructure; >
<!--- Element doc is used for descriving the structure and content of any other rdocument that is not included in the list of document explicitly managed by Akoma Ntoso -->
<!ELEMENT doc           @openStructure; >

<!-- =====================================================================

        AN common containers elements

     ===================================================================== -->

<!--- the element preface is used as a container of all prefacing material (e.g. headers, formulas, etc.) -->
<!ELEMENT preface     @blocksopt; >
<!--- the element preamble is used as a container of the text that opens the main body of the document as a preamble -->
<!ELEMENT preamble    @blocksopt; >
<!--- the element conclusion is used as a container of all concluding material (e.g. dates, signatures, formulas, etc.) -->
<!ELEMENT conclusions @blocksopt; >
<!--- the element header is used as a container of all prefacing material of judgements (e.g. headers, formulas, etc.) -->
<!ELEMENT header      @blocksopt; >
<!--- the element attachments is used as a container of individual attachment elements -->
<!ELEMENT attachments (attachment+) >
<!ATTLIST attachments ##coreopt; >
<!--- the element attachment is a reference (i.e., a URI) to another document of the same package that represents an attachment (such as a schedule, a table, etc.) -->
<!ELEMENT attachment  @referenceType; >
<!--- the element outOfLines is used as a container of all individual outOfLine elements -->
<!ELEMENT outOfLines  (outOfLine+) >
<!--- the element outOfLine is used as a container of material that is placed out of the main flow of the document (e.g. sidenotes) -->
<!ELEMENT outOfLine   @blocksreq; >
<!ATTLIST outOfLine   ##link; ##authoritative;
                      type  #outOfLineType; #REQUIRED>
<!--- the element interstitial is used as a container of text elements and blocks that are placed for any reason between individual documents in a collection of documents -->
<!ELEMENT interstitial  @blocksreq; >

<!--- the element collectionContent is the container of a list of other documents (e.g, acts, bills, amendments, etc.) possibly  interspersed with interstitial elements with content that does not form an individual document -->
<!ELEMENT collectionContent       ((@@documentType;),interstitial?)+ >
<!ATTLIST collectionContent          ##coreopt; >

<!--- the element body is the container of the main hierarchy of a hierarchical document (e.g, an act) -->
<!ELEMENT body            (@@hierElements;)+ >
<!ATTLIST body            ##coreopt; >

<!--- the element debate is the container of the main hierarchy of a debate -->
<!ELEMENT debate          (@@speechSection;)+ >
<!ATTLIST debate          ##coreopt; >

<!--- the element judgementBody is the container of the main hierarchy of a judgement document -->
<!ELEMENT judgementBody   (@@judgementBlock;)+ >
<!ATTLIST judgementBody   ##coreopt; >

<!--- the element mainContent is the container of the main part of all other document types -->
<!ELEMENT mainContent     @maincontent; >

<!-- =====================================================================

        Elements for hierarchical documents

     ===================================================================== -->
<!--- this element is a hierarchical container called "section" either explicitly or due to the local radition -->
<!ELEMENT section       @hierarchy; >        
<!--- this element is a hierarchical container called "part" either explicitly or due to the local radition -->
<!ELEMENT part          @hierarchy; >
<!--- this element is a hierarchical container called "paragraph" either explicitly or due to the local radition -->
<!ELEMENT paragraph     @hierarchy; >
<!--- this element is a hierarchical container called "chapter" either explicitly or due to the local radition -->
<!ELEMENT chapter       @hierarchy; >
<!--- this element is a hierarchical container called "title" either explicitly or due to the local radition -->
<!ELEMENT title         @hierarchy; >
<!--- this element is a hierarchical container called "book" either explicitly or due to the local radition -->
<!ELEMENT book          @hierarchy; >
<!--- this element is a hierarchical container called "tome" either explicitly or due to the local radition -->
<!ELEMENT tome          @hierarchy; >
<!--- this element is a hierarchical container called "article" either explicitly or due to the local radition -->
<!ELEMENT article       @hierarchy; >
<!--- this element is a hierarchical container called "clause" either explicitly or due to the local radition -->
<!ELEMENT clause        @hierarchy; >
<!--- this element is a hierarchical container called "subsection" either explicitly or due to the local radition -->
<!ELEMENT subsection    @hierarchy; >
<!--- this element is a hierarchical container called "subpart" either explicitly or due to the local radition -->
<!ELEMENT subpart       @hierarchy; >
<!--- this element is a hierarchical container called "subparagraph" either explicitly or due to the local radition -->
<!ELEMENT subparagraph  @hierarchy; >
<!--- this element is a hierarchical container called "subchapter" either explicitly or due to the local radition -->
<!ELEMENT subchapter    @hierarchy; >
<!--- this element is a hierarchical container called "subtitle" either explicitly or due to the local radition -->
<!ELEMENT subtitle      @hierarchy; >
<!--- this element is a hierarchical container called "subclause" either explicitly or due to the local radition -->
<!ELEMENT subclause     @hierarchy; >

<!--- the element content is the final container in a hierarchy, and is where the blocks of text of the content of the structure are finally specified  -->
<!ELEMENT content       @blocksopt; >
<!--- the element num is a heading element in a hierarchy that contains a number or any other ordered mechanism to identify the structure. -->
<!ELEMENT num           @inline; >
<!--- the element heading is a heading element in a hierarchy that contains a title or any other textual content to describe the structure. -->
<!ELEMENT heading       @inline; >
<!--- the element subheading is a heading element in a hierarchy that contains a subtitle or any other textual content to further describe the structure. -->
<!ELEMENT subheading    @inline; >

<!-- =====================================================================

        Elements for debates documents

     ===================================================================== -->

<!--- this element is a structural container for parts of a debates that are relevant to the administration of an oath -->
<!ELEMENT administrationOfOath  @althierarchy; >
<!--- this element is a structural container for parts of a debates that are relevant to the declaration of votes -->
<!ELEMENT declarationOfVote     @althierarchy; >
<!--- this element is a structural container for parts of a debates that are relevant to communications from the house -->
<!ELEMENT communication         @althierarchy; >
<!--- this element is a structural container for parts of a debates that are relevant to petitions -->
<!ELEMENT petitions             @althierarchy; >
<!--- this element is a structural container for parts of a debates that are relevant to the display of papers -->
<!ELEMENT papers                @althierarchy; >
<!--- this element is a structural container for parts of a debates that are relevant to the notices of motions -->
<!ELEMENT noticesOfMotion       @althierarchy; >
<!--- this element is a structural container for parts of a debates that are relevant to questions -->
<!ELEMENT questions             @althierarchy; >
<!--- this element is a structural container for parts of a debates that are relevant to addresses -->
<!ELEMENT address               @althierarchy; >
<!--- this element is a structural container for parts of a debates that are relevant to procedural motions -->
<!ELEMENT proceduralMotions     @althierarchy; >
<!--- this element is a structural container for parts of a debates that are relevant to points of order -->
<!ELEMENT pointOfOrder          @althierarchy; >
<!--- this element is a generic structural container for all other parts of a debates that are not explicitly supported with a named element -->
<!ELEMENT subdivision           @althierarchy; >
<!ATTLIST subdivision           ##name; >

<!--- the element speech is a container of a single speech utterance in a debate. Dialogs between speakers need a speech element each -->
<!ELEMENT speech              @speechType; >
<!--- the element question is a container of a single official question as proposed by an MP to a peson holding an official position -->
<!ELEMENT question            @speechType; >
<!--- the element answer is a container of a single official answer to a question -->
<!ELEMENT answer              @speechType; >
<!--- the element other is a container of parts of a debate that are not speeches, nor scene comments (e.g., lists of papers, etc.) -->
<!ELEMENT other               @blocksopt; >
<!--- the element scene is a container of descriptions of the scene elements happening in a given moment during a debate (e.g., applauses) -->
<!ELEMENT scene               @inline; >

<!--- the element list is used as a container of many individual item elements put in a list -->
<!ELEMENT list                (item+) >
<!ATTLIST list                ##corereq; >
<!--- the element from is a heading element in a debate that contains the name or role or a reference to the person doing the speech -->
<!ELEMENT from          @inline; >

<!--- this element is a structural container for the section of a judgement containing introductory material -->
<!ELEMENT introduction        @maincontent; >
<!--- this element is a structural container for the section of a judgement containing the background  -->
<!ELEMENT background          @maincontent; >
<!--- this element is a structural container for the section of a judgement containing the motivation  -->
<!ELEMENT motivation          @maincontent; >
<!--- this element is a structural container for the section of a judgement containing the decision -->
<!ELEMENT decision            @maincontent; >

<!-- =====================================================================
    
    AN block elements
    Comment: the only AN-specific block are the table of content (TOC), 
    a structure containing toc items related to the various subparts of the 
    main document, the list item and the titled block
    
    ===================================================================== -->

<!--- The complex type itemType is similar to a hierarchical element, but is isolated and does not belong to a full hierarchy. -->
<!ENTITY @ itemType          "@basehierarchy;, (@@blockElements;)+"             "##corereq;">
<!--- The element tblock (titled block) is used to specify a container for blocks introduced by heading elements, similarly to a hierarchical structure -->
<!ELEMENT tblock              @itemType; >
<!-- The element item is a container belonging to a list -->
<!ELEMENT item                @itemType; >

<!--- the element toc (Table of Content) is used as a container of many individual toc items -->
<!ELEMENT toc       (tocItem+) >

<!--- the element tocItem is a component of the table of content and contains header information about sections or parts of the rest of the document -->
<!ELEMENT tocItem   @inline; >
<!ATTLIST tocItem   ##link; level #INTEGER #REQUIRED >
   
   
<!-- =====================================================================

        AN inline elements
        Comment: AN-specific inline elements are connected to the 
        identification of elements that are corresponding to an inline 
        legal structure, regardless of their position in the document.

     ===================================================================== -->

<!--- the element docType is an inline element within preface to identify the string used by the document for its own type -->
<!ELEMENT docType      @inline; >
<!--- the element docTitle is an inline element within preface to identify the string used by the document for its own title -->
<!ELEMENT docTitle     @inline; >
<!--- the element docNumber is an inline element within preface to identify the string used by the document for its own number -->
<!ELEMENT docNumber    @inline; >
<!--- the element docketNumber is an inline element within preface to identify the string used by the document for the number of the docket, case, file, etc which the document belongs to -->
<!ELEMENT docketNumber    @inline; >
<!--- the element docProponent is an inline element within preface to identify the string used by the document for its proponent -->
<!ELEMENT docProponent @inline; >
<!--- the element docDate is an inline element within preface to identify the string used by the document for its own date(s). Documents with multiple dates may use multiple docDate elements. -->
<!ELEMENT docDate      @inline; >
<!ATTLIST docDate      ##date; >
<!--- the element docPurpose is an inline element within preface to identify the string used by the document detailing its own purpose -->
<!ELEMENT docPurpose   @inline; >
<!--- the element docCommittee is an inline element within preface to identify the string used by the document detailing the committee within which the document originated -->
<!ELEMENT docCommittee   @inline; >
<!--- the element docIntroducer is an inline element within preface to identify the string used by the document detailing the individual introducing of the document -->
<!ELEMENT docIntroducer   @inline; >
<!--- the element docStage is an inline element within preface to identify the string used by the document detailing the stage in which the document sits -->
<!ELEMENT docStage   @inline; >
<!--- the element docStatus is an inline element within preface to identify the string used by the document detailing the status of the document -->
<!ELEMENT docStatus   @inline; >
<!--- the element docJurisdiction is an inline element within preface to identify the string used by the document detailing the jurisdiction of the document -->
<!ELEMENT docJurisdiction   @inline; >

<!--- the element courtType is an inline element within judgements to identify the string used by the document for the type of the court doing the judgement -->
<!ELEMENT courtType          @inline; >
<!--- the element neutralCitation is an inline element within judgements to identify the string declared by the document as being the neutral citation for the judgement -->
<!ELEMENT neutralCitation    @inline; >
<!--- the element party is an inline element within judgements to identify where the document defines one of the parties -->
<!ELEMENT party              @inlinereqreq; >
<!ATTLIST party              ##role; >
<!--- the element judge is an inline element within judgements to identify where the document defines one of the judges, and his/her role -->
<!ELEMENT judge              @inlinereqreq; >
<!ATTLIST judge              ##role; >
<!--- the element lawyer is an inline element within judgements to identify where the document defines one of the lawyers, his/her role, which party it represents, and the other lawyer, if any, this lawyer received the power delegation of power in some role -->
<!ELEMENT lawyer             @inlinereqreq; >
<!ATTLIST lawyer             ##role; 
                             for         #ANYURI    #IMPLIED 
                             empoweredBy #ANYURI    #IMPLIED >
<!--- the element opinion is an inline element within judgements to identify where the document defines the opinion of one of the judges -->
<!ELEMENT opinion            @inline; >
<!ATTLIST opinion            type  #opinionType; #IMPLIED>
                      
<!--- the element signature is an inline element within conclusions to identify where the document defines one of the signatures -->
<!ELEMENT signature          @inline; >

<!--- the element date is an inline element to identify a date expressed in the text and to propose a normalized representation in the date attribute. -->
<!ELEMENT date               @inline; >
<!ATTLIST date               ##date; >
<!--- the element entity is an inline element to identify a text fragment introducing or referring to a concept in the ontology -->
<!ELEMENT entity             @inlinereqreq; >

<!--- the element ref is an inline element containing a legal references (i.e. a reference to a document with legal status and for which an Akoma Ntoso URI exists)  -->
<!ELEMENT ref          @inlinereq; >
<!ATTLIST ref          ##link; >
<!--- the element mref is an inline element containing multiple references (each in turn represented by a ref element) -->
<!ELEMENT mref         @inline; >
<!--- the element rref is an inline element containing a range of references between the URI specified in the href attribute and the one specified in the upTo attribute. -->
<!ELEMENT rref         @inlinereq; >
<!ATTLIST rref         ##link; 
                       upTo   #ANYURI        #REQUIRED >
                       
<!--- the complex type modType specifies the content that is allowed within mod, mmod and rmod elements, i.e. it adds quotedText and quotedStructure to the normal list of inline elements -->
<!ENTITY @ modType  "(#PCDATA | @@inlineCM; | quotedText | quotedStructure )*" "##corereq;" >
<!--- the element mod is an inline element containing the specification of a modification on another document -->
<!ELEMENT mod   @modType;>
<!--- the element mmod is an inline element containing multiple specifications of modifications on another document -->
<!ELEMENT mmod  @modType;>
<!--- the element rmod is an inline element containing the specification of a range of modifications on another document -->
<!ELEMENT rmod  @modType;>
<!ATTLIST rmod  upTo   #ANYURI        #REQUIRED >

<!--- the element quotedText is an inline element containing a small string that is used either as the text being replaced, or the replacement, or the positioning at which some modification should take place. -->
<!ELEMENT quotedText        @inline; >
<!--- the element quotedStructure is a non-pattern-based inline element containing a full structure proposed as an insertion or a replacement -->
<!ELEMENT quotedStructure   (@@hierElements; | @@blockElements; | @@containerElements;)+ >
<!ATTLIST quotedStructure   ##corereq; >

<!--- the element def is an inline element used for the definition of a term used in the rest of the document-->
<!ELEMENT def          @inline; >
<!--- the element remark is an inline element for the specification of editorial remarks (e.g., applauses, laughters, etc.) especially within debate records -->
<!ELEMENT remark       @inline; >
<!ATTLIST remark       type #remarkType; #IMPLIED >

<!--- the element ins is an inline element for the specification of editorial insertions -->
<!ELEMENT ins          @inline; >
<!--- the element del is an inline element for the specification of editorial deletions -->
<!ELEMENT del          @inline; >
<!--- the element omissis is an inline element for the specification of a text that substitues a textual omission (e.g., dots, spaces, the word "omissis", etc.  -->
<!ELEMENT omissis      @inline; >

<!--- the element noteRef is a reference to a editorial note placed in the notes metadata section -->
<!ELEMENT noteRef      @markeropt; >
<!ATTLIST noteRef      ##link; ##authoritative;
                       num    #STRING        #REQUIRED >
                       
<!--- the element recordedTime is an inline element for the specification of an explicit mention of a time (e.g., in a debate) -->
<!ELEMENT recordedTime   @markeropt; >
<!ATTLIST recordedTime   type #timeType; #IMPLIED
                         ##time; >

<!--- the complex type eolType is shared by eol and eop elements as being able to specify a position within the next word in which the break can happen -->
<!ENTITY @ eolType  "@markeropt;" "breakat  #INTEGER #IMPLIED">
<!--- the element eol (end of line) is a marker for where in the original text the line breaks. If the line breaks within a word, place the element BEFORE the word and place the number of characters before the break in the attribute breakat -->
<!ELEMENT eol   @eolType; >
<!--- the element eop (end of page) is a marker for where in the original text the page breaks. Do NOT use a eol element, too. If the page breaks within a word, place the element BEFORE the word and place the number of characters before the break in the attribute breakat -->
<!ELEMENT eop   @eolType; >

<!-- =====================================================================

        Generic elements
        Comment: All elements in this schema fall under one of five
        content models: hierarchical container, container, block, inline 
        and mark. Besides named elements, the schema also provides for a 
        generic element for each of them, that can be used for markup that 
        fits the content models but can be specified by a precise name that 
        is not used in this schema. The 'name' attribute must be used for 
        naming the element. 
        It is also a characteristic of this schema that all named elements 
        are equivalent, and can be substituted to, the corresponding generic 
        element with their name as the value of the name attribute. Thus, by 
        definition, <p> = <block name="p">, <part> = <hcontainer name="part">, 
        <act> = <container name="act">, etc.
        Pattern: Generic Document + Role Attribute
        Reference: http://www.xmlpatterns.com/GenericDocumentMain.shtml + 
                   http://www.xmlpatterns.com/RoleAttributeMain.shtml

     ===================================================================== -->

<!--- the element hcontainer is a generic element for a hierarchical container. It can be placed in a hierarchy instead of any of the other hierarchical containers. The attribute name is required and gives a name to the element.  -->
<!ELEMENT hcontainer @hierarchy; >
<!ATTLIST hcontainer ##name; >
<!--- the element container is a generic element for a container. It can be placed in a container instead of any of the other containers. The attribute name is required and gives a name to the element. -->
<!ELEMENT container  @blocksreq; >
<!ATTLIST container  ##name; >
<!--- the element block is a generic element for a container. It can be placed in a container instead of any of the other blocks. The attribute name is required and gives a name to the element. -->
<!ELEMENT block      @inline; >
<!ATTLIST block      ##name; >
<!--- the element inline is a generic element for an inline. It can be placed inside a block instead of any of the other inlines. The attribute name is required and gives a name to the element. -->
<!ELEMENT inline     @inline; >
<!ATTLIST inline     ##name; >
<!--- the element marker is a generic element for a marker. It can be placed in a block instead of any of the other markers. The attribute name is required and gives a name to the element. -->
<!ELEMENT marker     @markerreq; >
<!ATTLIST marker     ##name; >

<!--- the element foreign is a generic container for elements not belonging to the Akoma Ntoso (e.g., mathematical formulas). It is an inline element and thus can be placed in a block.  -->
<!ELEMENT foreign    @anyOtherType; >

<!-- =====================================================================

        HTML elements
        Comment: Many elements are drawn directly from HTML 4.0
        Pattern: Reuse Document Types (partial)
        Reference: http://www.xmlpatterns.com/ReuseDocumentTypesMain.shtml

     ===================================================================== -->

<!--- The element div is an HTML element, but is NOT used in Akoma Ntoso as in HTML. Instead of being used as a generic block, Akoma Ntoso uses div as a generic container (as in common practice) -->
<!ELEMENT div  @blocksreq; >

<!--- The element p is an HTML element and is used in Akoma Ntoso as in HTML, for the generic paragraph of text (a block) -->
<!ELEMENT p    @inline; >
<!--- The element li is an HTML element and is used in Akoma Ntoso as in HTML, for the generic list item (not a pattern) -->
<!ELEMENT li   (#PCDATA | @@inlineCM; | ul | ol | p)* >
<!ATTLIST li   ##optvalue;  ##coreopt;>

<!--- The element span is an HTML element and is used in Akoma Ntoso as in HTML, for the generic inline -->
<!ELEMENT span @inline; >
<!--- The element b is an HTML element and is used in Akoma Ntoso as in HTML, for the bold style (an inline) -->
<!ELEMENT b    @inline; >
<!--- The element i is an HTML element and is used in Akoma Ntoso as in HTML, for the italic style (an inline) -->
<!ELEMENT i    @inline; >
<!--- The element a is an HTML element and is used in Akoma Ntoso as in HTML, for the generic link to a web resource (NOT to an Akoma Ntoso document: use ref for that). It is an inline. -->
<!ELEMENT a    @inline; >
<!ATTLIST a
    ##link;
    target    #STRING    #IMPLIED
>

<!--- The element img is an HTML element and is used in Akoma Ntoso as in HTML, for including an image. It is a marker. -->
<!ELEMENT img @markeropt;>
<!ATTLIST img
    src    #ANYURI       #REQUIRED
    alt    #STRING       #IMPLIED
    width  #INTEGER      #IMPLIED
    height #INTEGER      #IMPLIED
>

<!--- the complex type listItems specifies the content model of elements ul and ol, and specifies just a sequence of list items (elements li). -->
<!ENTITY @ listItems "(li+)" "##corereq;">
<!--- The element ul is an HTML element and is used in Akoma Ntoso as in HTML, for an unordered list of list item (elements li) -->
<!ELEMENT ul   @listItems; >
<!--- The element ol is an HTML element and is used in Akoma Ntoso as in HTML, for an ordered list of list item (elements li) -->
<!ELEMENT ol   @listItems; >

<!--- The element table is an HTML element and is used in Akoma Ntoso as in HTML, for a table of rows and columns of data -->
<!ELEMENT table (tr+)>
<!ATTLIST table
    ##corereq;
    width       #INTEGER #IMPLIED
    border      #INTEGER #IMPLIED
    cellspacing #INTEGER #IMPLIED
    cellpadding #INTEGER #IMPLIED
>
<!--- The element tr is an HTML element and is used in Akoma Ntoso as in HTML, for a row of cells of a table -->
<!ELEMENT tr (th | td)+>
<!ATTLIST tr
    ##corereq;
>
<!--- The element th is an HTML element and is used in Akoma Ntoso as in HTML, for a header cell of a table -->
<!ELEMENT th  (@inline;)>
<!ATTLIST th  ##cellattrs; >

<!--- The element td is an HTML element and is used in Akoma Ntoso as in HTML, for a data cell of a table -->
<!ELEMENT td  (@inline;)>
<!ATTLIST td  ##cellattrs; >

<!-- =====================================================================

        Metadata elements for all documents

     ===================================================================== -->

<!--- The element meta is the overall container of all metadata elements. It contains all specific metadata containers. -->
<!ELEMENT meta             (identification, publication, classification*, lifecycle*, workflow*,
                            analysis*, temporalData*, references*, notes*, proprietary*) >

<!--- The element identification is the metadata container of identifying information of the document according to the FRBR hierarchy -->
<!ELEMENT identification   (FRBRWork, FRBRExpression, FRBRManifestation, FRBRItem?) >
<!ATTLIST identification   ##source; >

<!--- The complexType coreProperties lists the identifying properties available at any of the FRBR hierarchy levels. -->
<!ENTITY @ coreProperties   "(FRBRthis, FRBRuri+, FRBRalias*, FRBRdate, FRBRauthor+, components?, preservation?)" >
<!--- The group langProperties lists the language-specific properties that are characteristics of the FRBR Expression level. -->
<!ENTITY @@ langProperties   "(FRBRlanguage*, FRBRtranslation*)" >

<!--- The element FRBRWork is the metadata container of identifying properties related to the Work level according to the FRBR hierarchy -->
<!ELEMENT FRBRWork             @coreProperties; >
<!--- The element FRBRExpression is the metadata container of identifying properties related to the Expression level according to the FRBR hierarchy -->
<!ELEMENT FRBRExpression       (@coreProperties;, (@@langProperties;)) >
<!--- The element FRBRManifestation is the metadata container of identifying properties related to the Manifestation level according to the FRBR hierarchy -->
<!ELEMENT FRBRManifestation    @coreProperties; >
<!--- The element FRBRItem is the metadata container of identifying properties related to the Item level according to the FRBR hierarchy. -->
<!ELEMENT FRBRItem             @coreProperties; >


<!--- The element FRBRthis is the metadata property containing the URI of the specific component of the document in the respective level of the FRBR hierarchy -->
<!ELEMENT FRBRthis             @metaopt;>
<!ATTLIST FRBRthis             ##value; >
<!--- The element FRBRuri is the metadata property containing the URI of the whole document in the respective level of the FRBR hierarchy -->
<!ELEMENT FRBRuri              @metaopt;>
<!ATTLIST FRBRuri              ##value; >
<!--- The element FRBRalias is the metadata property containing additional well-known names of the document in the respective level of the FRBR hierarchy -->
<!ELEMENT FRBRalias            @metaopt;>
<!ATTLIST FRBRalias            ##value; >
<!--- The element FRBRdate is the metadata property containing a relevant date of the document in the respective level of the FRBR hierarchy. Attribute name specifies which actual date is contained here. -->
<!ELEMENT FRBRdate             @metaopt;>
<!ATTLIST FRBRdate             ##date; ##name; >
<!--- The element FRBRauthor is the metadata property containing a relevant author of the document in the respective level of the FRBR hierarchy. Attribute as specifies the roleof the author. -->
<!ELEMENT FRBRauthor           @metaopt;>
<!ATTLIST FRBRauthor           ##link; 
                              as #ANYURI  #IMPLIED >
<!--- The element FRBRlanguage is the metadata property containing a RFC4646 (three-letter code) of the main human language used in the content of this expression -->
<!ELEMENT FRBRlanguage            @metaopt;>
<!ATTLIST FRBRlanguage            ##lang; >

<!--- The element FRBRtranslation is the metadata property specifying the source of which this expression is a translation of. A translation is defined as an expression less authoritative than the original one. -->
<!ELEMENT FRBRtranslation            @metaopt;>
<!ATTLIST  FRBRtranslation            ##link; ##lang;  ##authoritative;
                                  by   #ANYURI   #REQUIRED >


<!--- The element components is the metadata property containing a list of component elements in the respective level of the FRBR hierarchy. -->
<!ELEMENT components          (component)* >
<!--- The element component is the metadata property specifying a component of the document in the respective level of the FRBR hierarchy. Component elements can conytain other components. -->
<!ELEMENT component           (component)* >
<!ATTLIST component           ##idreq; ##name; ##link; ##show;>  
<!--- The element preservation is the metadata property containing an arbitrary list of elements detailing the preservation actions taken for the document is the respective level of the FRBR hierarchy.. -->
<!ELEMENT preservation        @anyOtherType; >




<!--- The element publication is the metadata container specifying a publication event for the FRBR expression of the document. -->
<!ELEMENT publication      @metaopt; >
<!ATTLIST publication      ##date; ##show; ##name; ##refers; >

<!--- The element classification is the metadata container of a list of keywords associated to the FRBR expression of the document. -->
<!ELEMENT classification   (keyword+)>
<!ATTLIST classification   ##source; >

<!--- The element keyword is a metadata element specifying a keyword  associated to the FRBR expression of the document. Attribute dictionary (required) specifies the thesaurus out of which the keyword has been taken. -->
<!ELEMENT keyword @metaopt;>
<!ATTLIST keyword 
            ##value;
            ##show;
            dictionary  #ANYURI  #REQUIRED >

<!--- The element lifecycle is a metadata container of the events associated to the FRBR expression of the document. -->
<!ELEMENT lifecycle (event+)>
<!ATTLIST lifecycle ##source; >
<!--- The element event is a metadata element specifying facts about an event that had an effect on the document. For each event, a date, a type and a document that generated the event must be referenced.  -->
<!ELEMENT event @metareq;>
<!ATTLIST event
    ##date;
    ##source;
    type   #eventType; #IMPLIED
>

<!--- The element workflow is a metadata container of the steps associated to the workflow of the document. -->
<!ELEMENT workflow   (step+)>
<!ATTLIST workflow   ##source; >
<!--- The element step is a metadata element specifying facts about a workflow step occurred to the document. For each event, a date, a type, an actor (and the corresponding role) that generated the action must be referenced. The outcome, too, can be specified. -->
<!ELEMENT step     @metareq;>
<!ATTLIST step
    ##date;
    ##actor;
    ##role;
    ##outcome;
>

<!--- The element analysis is a metadata container of all the analytical considerations on the document. Currently we deal with the analysis of modifcation events -->
<!ELEMENT analysis              (activeModifications?, passiveModifications?, judicial?) >
<!ATTLIST analysis              ##source; >

<!--- The complex type Amendments is a list of all the amendment elements that can be used on a document analysis -->
<!ENTITY @ Amendments          "(textualMod | meaningMod | scopeMod | forceMod | efficacyMod | legalSystemMod)+" >
<!--- The complex type modificationType lists all the properties associated to modification elements. -->
<!ENTITY @ modificationType    "(source+, destination+, force?, efficacy?, application?, duration?, condition?)" 
                               "##idreq; ##enactment; ##modifiers; ##refers;" >
                                 
<!--- The simple type TextualMods lists all the types of textual modifications as values for the type attribute of the textualMod element. -->
<!ENTITY # TextualMods         "#STRING(repeal|substitution|insertion|replacement|renumbering)" >
<!--- The simple type MeaningMods lists all the types of modifications in meaning as values for the type attribute of the meaningMod element. -->
<!ENTITY # MeaningMods         "#STRING(variation|termModification|authenticInterpretation)" >
<!--- The simple type ScopeMods lists all the types of modifications in scope as values for the type attribute of the scopeMod element. -->
<!ENTITY # ScopeMods           "#STRING(exceptionOfScope|extensionOfScope)" >
<!--- The simple type ForceMods lists all the types of modifications in force as values for the type attribute of the forceMod element. -->
<!ENTITY # ForceMods           "#STRING(entryIntoForce|endOfEnactment|postponementOfEntryIntoForce|
                                prorogationOfForce|reEnactment|uncostitutionality)" >
<!--- The simple type Efficacymods lists all the types of modifications in efficacy as values for the type attribute of the efficacyMod element. -->
<!ENTITY # EfficacyMods        "#STRING(entryIntoEfficacy|endOfEfficacy|inapplication|retroactivity|extraefficacy|
                                postponementOfEfficacy|prorogationOfEfficacy)" >
<!--- The simple type LegalSystemMods lists all the types of modifications in the legal system as values for the type attribute of the LegalSystemMod element. -->
<!ENTITY # LegalSystemMods     "#STRING(staticReference|implementation|ratification|application|
                                legislativeDelegation|deregulation|conversion|expiration|
                                reiteration|remaking|republication|coordination)" >

<!--- The element activeModifications is a metadata container of the active modifications generated by the document. -->
<!ELEMENT activeModifications   @Amendments; >
<!--- The element passiveModifications is a metadata container of the passive modifications affecting the document. -->
<!ELEMENT passiveModifications  @Amendments; >
<!--- The element textualMod is a metadata element specifying an (active or passive) textual modification for the document. -->
<!ELEMENT textualMod            (@modificationType;, (old?, new?)) > 
<!ATTLIST textualMod            type #TextualMods; #REQUIRED >
<!--- The element meaningMod is a metadata element specifying an (active or passive) modification in meaning for the document. -->
<!ELEMENT meaningMod            (@modificationType;, (domain?)) > 
<!ATTLIST meaningMod            type #MeaningMods; #REQUIRED >
<!--- The element scopeMod is a metadata element specifying an (active or passive) modification in scope for the document. -->
<!ELEMENT scopeMod              (@modificationType;, (domain?)) > 
<!ATTLIST scopeMod              type #ScopeMods; #REQUIRED >
<!--- The element forceMod is a metadata element specifying an (active or passive) modification in force for the document. -->
<!ELEMENT forceMod              @modificationType; > 
<!ATTLIST forceMod              type #ForceMods; #REQUIRED >
<!--- The element efficacyMod is a metadata element specifying an (active or passive) modification in efficacy for the document. -->
<!ELEMENT efficacyMod           @modificationType; > 
<!ATTLIST efficacyMod           type #EfficacyMods; #REQUIRED >
<!--- The element legalSystemMod is a metadata element specifying an (active or passive) modification in the legal system for the document. -->
<!ELEMENT legalSystemMod        @modificationType; > 
<!ATTLIST legalSystemMod        type #LegalSystemMods; #REQUIRED >

<!--- The complex type judicialArguments is a list of all the judicial analysis elements that can be used on the analysis of a judgment -->
<!ENTITY @ judicialArguments          "(result, (supports | isAnalogTo | applies | extends | restricts | derogates | contrasts | overrules | dissentsFrom | putsInQuestion | distinguishes)+)" >
<!--- The complex type judicialArgumentType lists all the properties associated to judicial elements. -->
<!ENTITY @ judicialArgumentType       "(source+, destination+, condition?)" 
                               "##idreq; ##enactment; ##modifiers; ##refers;" >

<!--- The element judicial is a metadata container of the analysis of the judicial arguments of a judgement. -->
<!ELEMENT judicial   @judicialArguments; >
<!--- The element result is a metadata element specifying the overall result of the judgement. -->
<!ELEMENT result   @anyOtherType; >
<!ATTLIST result   type  #resultType; #REQUIRED >

<!--- The element supports is a metadata element specifying a reference to a source supported by the argument being described. -->
<!ELEMENT supports  @judicialArgumentType; >
<!--- The element isAnalogTo is a metadata element specifying a reference to a source analog to the argument being described. -->
<!ELEMENT isAnalogTo  @judicialArgumentType; >
<!--- The element applies is a metadata element specifying a reference to a source applyed by the argument being described. -->
<!ELEMENT applies  @judicialArgumentType; >
<!--- The element extends is a metadata element specifying a reference to a source extended by the argument being described. -->
<!ELEMENT extends  @judicialArgumentType; >
<!--- The element restricts is a metadata element specifying a reference to a source restricted by the argument being described. -->
<!ELEMENT restricts  @judicialArgumentType; >
<!--- The element derogates is a metadata element specifying a reference to a source derogated by the argument being described. -->
<!ELEMENT derogates  @judicialArgumentType; >
<!--- The element contrasts is a metadata element specifying a reference to a source contrasted by the argument being described. -->
<!ELEMENT contrasts  @judicialArgumentType; >
<!--- The element overrules is a metadata element specifying a reference to a source overruled by the argument being described. -->
<!ELEMENT overrules  @judicialArgumentType; >
<!--- The element dissentsFrom is a metadata element specifying a reference to a source dissented from the argument being described. -->
<!ELEMENT dissentsFrom  @judicialArgumentType; >
<!--- The element questions is a metadata element specifying a reference to a source questioned by the argument being described. -->
<!ELEMENT putsInQuestion  @judicialArgumentType; >
<!--- The element distinguishes is a metadata element specifying a reference to a source being distinguished by the argument being described. -->
<!ELEMENT distinguishes  @judicialArgumentType; > 


<!--- the complex type argumentType defines the empty content model and the list of attributes for metadata elements in the analysis section -->
<!ENTITY @ argumentType      ""                            "##idopt; ##link; upTo   #ANYURI #IMPLIED" >
<!--- the complex type periodType defines the empty content model and the list of attributes for metadata elements in the analysis section using periods -->
<!ENTITY @ periodType        ""                            "##idopt; ##period;" >                 

<!--- The element source is a metadata element specifying the URI of the source of the modification. -->
<!ELEMENT source           @argumentType;>
<!--- The element destination is a metadata element specifying the URI of the destination of the modification. -->
<!ELEMENT destination      @argumentType;>
<!--- The element force is a metadata element specifying the period of the force modification. -->
<!ELEMENT force            @periodType; >
<!--- The element efficacy is a metadata element specifying the period of the efficacy modification. -->
<!ELEMENT efficacy         @periodType; >
<!--- The element efficacy is a metadata element specifying the period of the efficacy modification. -->
<!ELEMENT application      @periodType; >
<!--- The element duration is a metadata element specifying the period of the duration modification. -->
<!ELEMENT duration         @periodType; >
<!--- The element condition is a metadata element specifying an open set (unmanaged by Akoma Ntoso) of conditions on the modification -->
<!ELEMENT condition        @anyOtherType; >
<!ATTLIST condition        frozen #BOOLEAN #IMPLIED >
<!--- The element old is a metadata element containing (in some unmanaged form) the old text of the modification. -->
<!ELEMENT old              @anyOtherType; >
<!--- The element new is a metadata element containing (in some unmanaged form) the new text of the modification. -->
<!ELEMENT new              @anyOtherType; >
<!--- The element domain is a metadata element containing (in some unmanaged form) the domain to which the modification applies. -->
<!ELEMENT domain           @anyOtherType; >

<!--- The element temporalData is a metadata container of all the temporal groups that cntain temporal information about any aspect of the document. In particular, versioned fragments of the text are assigned to temporal groups via the period attribute for the specification of in force or efficacy intervals, or any other type of temporal specification. -->
<!ELEMENT temporalData  (temporalGroup)+ >
<!ATTLIST temporalData     ##source; >

<!-- The element temporalGroup contains a list of time Intervals that need to be applied together to an element of the document that is associated to time information. Each temporal group can contain any number of time interval associated via the refersTo to a different time-specific concept. --> 
<!ELEMENT temporalGroup  (timeInterval+) >
<!ATTLIST temporalGroup  ##idreq; >

<!-- The element timeInterval contains all the data needed to identify a specific time interval. It is built either with two dates or with a date and a duration (exactly two of the 'start', 'end' and 'duration' attributes can be specified). Values are of the 'start' and 'end' attributes are NOT dates, but references to event elements in the corresponding metadata section. The refers attribute is a reference to a temporal concept belonging to the Akoma Ntoso ontology and specified in the references section -->
<!ELEMENT timeInterval  @metaopt; >
<!ATTLIST   timeInterval     ##refersreq; 
    start           #ANYURI        #IMPLIED
    end             #ANYURI        #IMPLIED
    duration      #DURATION   #IMPLIED
>

<!--- The group docrefs is a list of types of legal references to documents. -->
<!ENTITY @@ docRefs        "(original|passiveRef|activeRef|jurisprudence|hasAttachment|attachmentOf)" >
<!--- The group TLCs is a list of types of Top Level classes of the Akoma Ntoso ontology. -->
<!ENTITY @@ TLCs           "(TLCPerson|TLCOrganization|TLCConcept|TLCObject|TLCEvent|TLCPlace|TLCProcess|TLCRole|TLCTerm|TLCReference)" >
<!--- The group refItems is a list of types of references used in the references section. -->
<!ENTITY @@ refItems       "(@@docRefs;|@@TLCs;")>

<!--- The element references is a metadata container of all the references to entities external to the document mentioned in the document. They include references to legal documents of any form,a s well as references to people, organizations, events, roles, concepts, and anything else is managed by the Akoma Ntoso ontology. -->
<!ELEMENT references     (@@refItems;)+>
<!ATTLIST references     ##source; >

<!--- The element original is a metadata reference to the Akoma Ntoso URI of the original version of this document (i.e., the first expression) -->
<!ELEMENT original         @referenceType; >
<!--- The element passiveRef is a metadata reference to the Akoma Ntoso URI of a document providing modifications on this document (i.e., a passive references) -->
<!ELEMENT passiveRef       @referenceType; >
<!--- The element activeRef is a metadata reference to the Akoma Ntoso URI of a document that is modified by this document (i.e., an active references) -->
<!ELEMENT activeRef        @referenceType; >
<!--- The element jurisprudence is a metadata reference to the Akoma Ntoso URI of a document providing jurisprudence on this document -->
<!ELEMENT jurisprudence    @referenceType; >
<!--- The element hasAttachment is a metadata reference to the Akoma Ntoso URI of an attachment of this document -->
<!ELEMENT hasAttachment    @referenceType; >
<!ATTLIST hasAttachment    type CDATA  #IMPLIED >
<!--- The element attachmentOf is a metadata reference to the Akoma Ntoso URI of a document of which this document is an attachment -->
<!ELEMENT attachmentOf     @referenceType; >
<!ATTLIST attachmentOf     type CDATA  #IMPLIED >

<!--- The element TLCPerson is a metadata reference to the Akoma Ntoso URI of an ontology instance of the class Person -->
<!ELEMENT TLCPerson        @referenceType; >
<!--- The element TLCOrganization is a metadata reference to the Akoma Ntoso URI of an ontology instance of the class Organization -->
<!ELEMENT TLCOrganization  @referenceType; >
<!--- The element TLCConcept is a metadata reference to the Akoma Ntoso URI of an ontology instance of the class Concept -->
<!ELEMENT TLCConcept       @referenceType; >
<!--- The element TLCObject is a metadata reference to the Akoma Ntoso URI of an ontology instance of the class Object -->
<!ELEMENT TLCObject        @referenceType; >
<!--- The element TLCEvent is a metadata reference to the Akoma Ntoso URI of an ontology instance of the class Event -->
<!ELEMENT TLCEvent         @referenceType; >
<!--- The element TLCPlace is a metadata reference to the Akoma Ntoso URI of an ontology instance of the class Place -->
<!ELEMENT TLCPlace         @referenceType; >
<!--- The element TLCProcess is a metadata reference to the Akoma Ntoso URI of an ontology instance of the class Process -->
<!ELEMENT TLCProcess       @referenceType; >
<!--- The element TLCRole is a metadata reference to the Akoma Ntoso URI of an ontology instance of the class Role -->
<!ELEMENT TLCRole          @referenceType; >
<!--- The element TLCTerm is a metadata reference to the Akoma Ntoso URI of an ontology instance of the class Term -->
<!ELEMENT TLCTerm          @referenceType; >
<!--- The element TLCreference is a generic metadata reference to the Akoma Ntoso URI of an ontology instance of a class specified through the name attribute -->
<!ELEMENT TLCReference     @referenceType; >
<!ATTLIST TLCReference     ##name; >






<!--- The element notes is a metadata container of all the note elements used as footnotes and endnotes in the document. -->
<!ELEMENT notes        (note)+>
<!ATTLIST notes        ##source; >
<!--- The element note is a metadata element containing the text of the footnote and endnote specified. -->
<!ELEMENT note         @blocksreq;>

<!--- The element proprietary is a metadata container of any additional metadata property that does not belong to the Akoma Ntoso properties. Anything can be placed in this element.. -->
<!ELEMENT proprietary @anyOtherType; >
<!ATTLIST proprietary ##source; >



<!-- =====================================================================

        End of Schema

     ===================================================================== -->